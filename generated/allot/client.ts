import { Client as SoapClient, createClientAsync as soapCreateClientAsync } from "soap";
import { TnsgetAllCollectors } from "./definitions/TnsgetAllCollectors";
import { TnsgetAllCollectorsResponse } from "./definitions/TnsgetAllCollectorsResponse";
import { TnsimportDevice } from "./definitions/TnsimportDevice";
import { TnsimportDeviceResponse } from "./definitions/TnsimportDeviceResponse";
import { TnsgetServiceGroupsByIds } from "./definitions/TnsgetServiceGroupsByIds";
import { TnsgetServiceGroupsByIdsResponse } from "./definitions/TnsgetServiceGroupsByIdsResponse";
import { TnsdeleteVsCatalogEntries } from "./definitions/TnsdeleteVsCatalogEntries";
import { TnsdeleteVsCatalogEntriesResponse } from "./definitions/TnsdeleteVsCatalogEntriesResponse";
import { TnsgetDosCatalogEntries } from "./definitions/TnsgetDosCatalogEntries";
import { TnsgetDosCatalogEntriesResponse } from "./definitions/TnsgetDosCatalogEntriesResponse";
import { TnsgetNextAsymGroupId } from "./definitions/TnsgetNextAsymGroupId";
import { TnsgetNextAsymGroupIdResponse } from "./definitions/TnsgetNextAsymGroupIdResponse";
import { TnsgetVsIdByName } from "./definitions/TnsgetVsIdByName";
import { TnsgetVsIdByNameResponse } from "./definitions/TnsgetVsIdByNameResponse";
import { TnsdeleteUser } from "./definitions/TnsdeleteUser";
import { TnsdeleteUserResponse } from "./definitions/TnsdeleteUserResponse";
import { TnsaddIfcPortCatalogEntries } from "./definitions/TnsaddIfcPortCatalogEntries";
import { TnsaddIfcPortCatalogEntriesResponse } from "./definitions/TnsaddIfcPortCatalogEntriesResponse";
import { TnsgetClientDeviceGroupEntries } from "./definitions/TnsgetClientDeviceGroupEntries";
import { TnsgetClientDeviceGroupEntriesResponse } from "./definitions/TnsgetClientDeviceGroupEntriesResponse";
import { TnsrevertAllServiceGroupsToDefault } from "./definitions/TnsrevertAllServiceGroupsToDefault";
import { TnsrevertAllServiceGroupsToDefaultResponse } from "./definitions/TnsrevertAllServiceGroupsToDefaultResponse";
import { TnssaveWhiteList } from "./definitions/TnssaveWhiteList";
import { TnssaveWhiteListResponse } from "./definitions/TnssaveWhiteListResponse";
import { TnsinstallUpdatesFromLocalDisk } from "./definitions/TnsinstallUpdatesFromLocalDisk";
import { TnsinstallUpdatesFromLocalDiskResponse } from "./definitions/TnsinstallUpdatesFromLocalDiskResponse";
import { TnsgetAllChargingConditions2SpByPolicy } from "./definitions/TnsgetAllChargingConditions2SpByPolicy";
import { TnsgetAllChargingConditions2SpByPolicyResponse } from "./definitions/TnsgetAllChargingConditions2SpByPolicyResponse";
import { TnsgetAlertEntriesByIds } from "./definitions/TnsgetAlertEntriesByIds";
import { TnsgetAlertEntriesByIdsResponse } from "./definitions/TnsgetAlertEntriesByIdsResponse";
import { TnsupdateClientDeviceGroupEntries } from "./definitions/TnsupdateClientDeviceGroupEntries";
import { TnsupdateClientDeviceGroupEntriesResponse } from "./definitions/TnsupdateClientDeviceGroupEntriesResponse";
import { TnsgetDmOutputRecordByName } from "./definitions/TnsgetDmOutputRecordByName";
import { TnsgetDmOutputRecordByNameResponse } from "./definitions/TnsgetDmOutputRecordByNameResponse";
import { TnsgetServiceGroupIdByName } from "./definitions/TnsgetServiceGroupIdByName";
import { TnsgetServiceGroupIdByNameResponse } from "./definitions/TnsgetServiceGroupIdByNameResponse";
import { TnsdeleteGreCatalogEntries } from "./definitions/TnsdeleteGreCatalogEntries";
import { TnsdeleteGreCatalogEntriesResponse } from "./definitions/TnsdeleteGreCatalogEntriesResponse";
import { TnsgetClientDeviceGroupIdByName } from "./definitions/TnsgetClientDeviceGroupIdByName";
import { TnsgetClientDeviceGroupIdByNameResponse } from "./definitions/TnsgetClientDeviceGroupIdByNameResponse";
import { TnsgetContentValueId } from "./definitions/TnsgetContentValueId";
import { TnsgetContentValueIdResponse } from "./definitions/TnsgetContentValueIdResponse";
import { TnsgetDmInputFilteringRuleEntity } from "./definitions/TnsgetDmInputFilteringRuleEntity";
import { TnsgetDmInputFilteringRuleEntityResponse } from "./definitions/TnsgetDmInputFilteringRuleEntityResponse";
import { TnsdeleteTubeGroups } from "./definitions/TnsdeleteTubeGroups";
import { TnsdeleteTubeGroupsResponse } from "./definitions/TnsdeleteTubeGroupsResponse";
import { TnsremoveAndSetDeviceConfiguration } from "./definitions/TnsremoveAndSetDeviceConfiguration";
import { TnsremoveAndSetDeviceConfigurationResponse } from "./definitions/TnsremoveAndSetDeviceConfigurationResponse";
import { TnsupdateTubesQos } from "./definitions/TnsupdateTubesQos";
import { TnsupdateTubesQosResponse } from "./definitions/TnsupdateTubesQosResponse";
import { TnsgetUsers } from "./definitions/TnsgetUsers";
import { TnsgetUsersResponse } from "./definitions/TnsgetUsersResponse";
import { TnsgetSmpTopic } from "./definitions/TnsgetSmpTopic";
import { TnsgetSmpTopicResponse } from "./definitions/TnsgetSmpTopicResponse";
import { TnsgetWebSafeAuthenticatedUser } from "./definitions/TnsgetWebSafeAuthenticatedUser";
import { TnsgetWebSafeAuthenticatedUserResponse } from "./definitions/TnsgetWebSafeAuthenticatedUserResponse";
import { TnsupdateSubscriberIdFromSmf } from "./definitions/TnsupdateSubscriberIdFromSmf";
import { TnsupdateSubscriberIdFromSmfResponse } from "./definitions/TnsupdateSubscriberIdFromSmfResponse";
import { TnsgetDmEncryptionKey } from "./definitions/TnsgetDmEncryptionKey";
import { TnsgetDmEncryptionKeyResponse } from "./definitions/TnsgetDmEncryptionKeyResponse";
import { TnsgetClientDeviceEntriesByIds } from "./definitions/TnsgetClientDeviceEntriesByIds";
import { TnsgetClientDeviceEntriesByIdsResponse } from "./definitions/TnsgetClientDeviceEntriesByIdsResponse";
import { TnsgetGreGroupEntriesByIds } from "./definitions/TnsgetGreGroupEntriesByIds";
import { TnsgetGreGroupEntriesByIdsResponse } from "./definitions/TnsgetGreGroupEntriesByIdsResponse";
import { TnsrevertAllMonitoredServiceGroupToDefault } from "./definitions/TnsrevertAllMonitoredServiceGroupToDefault";
import { TnsrevertAllMonitoredServiceGroupToDefaultResponse } from "./definitions/TnsrevertAllMonitoredServiceGroupToDefaultResponse";
import { TnsgetWhiteList } from "./definitions/TnsgetWhiteList";
import { TnsgetWhiteListResponse } from "./definitions/TnsgetWhiteListResponse";
import { TnsgetRedirectInterfacesByDeviceId } from "./definitions/TnsgetRedirectInterfacesByDeviceId";
import { TnsgetRedirectInterfacesByDeviceIdResponse } from "./definitions/TnsgetRedirectInterfacesByDeviceIdResponse";
import { TnsupdateWebSafeUser } from "./definitions/TnsupdateWebSafeUser";
import { TnsupdateWebSafeUserResponse } from "./definitions/TnsupdateWebSafeUserResponse";
import { TnssetSmpTopic } from "./definitions/TnssetSmpTopic";
import { TnssetSmpTopicResponse } from "./definitions/TnssetSmpTopicResponse";
import { TnsgetSyslogEnabled } from "./definitions/TnsgetSyslogEnabled";
import { TnsgetSyslogEnabledResponse } from "./definitions/TnsgetSyslogEnabledResponse";
import { TnsgetQuotaEntriesByIds } from "./definitions/TnsgetQuotaEntriesByIds";
import { TnsgetQuotaEntriesByIdsResponse } from "./definitions/TnsgetQuotaEntriesByIdsResponse";
import { TnsdeleteApplicationEntities } from "./definitions/TnsdeleteApplicationEntities";
import { TnsdeleteApplicationEntitiesResponse } from "./definitions/TnsdeleteApplicationEntitiesResponse";
import { TnsgetDeviceCocTopic } from "./definitions/TnsgetDeviceCocTopic";
import { TnsgetDeviceCocTopicResponse } from "./definitions/TnsgetDeviceCocTopicResponse";
import { TnsgetQuotaPlansByIds } from "./definitions/TnsgetQuotaPlansByIds";
import { TnsgetQuotaPlansByIdsResponse } from "./definitions/TnsgetQuotaPlansByIdsResponse";
import { TnsdeleteNetworkDomains } from "./definitions/TnsdeleteNetworkDomains";
import { TnsdeleteNetworkDomainsResponse } from "./definitions/TnsdeleteNetworkDomainsResponse";
import { TnsdeleteGroups } from "./definitions/TnsdeleteGroups";
import { TnsdeleteGroupsResponse } from "./definitions/TnsdeleteGroupsResponse";
import { TnsdeleteQoeRuleDefCatalogEntries } from "./definitions/TnsdeleteQoeRuleDefCatalogEntries";
import { TnsdeleteQoeRuleDefCatalogEntriesResponse } from "./definitions/TnsdeleteQoeRuleDefCatalogEntriesResponse";
import { TnsgetByName } from "./definitions/TnsgetByName";
import { TnsgetByNameResponse } from "./definitions/TnsgetByNameResponse";
import { TnsgetChargingPlan2AppEntities } from "./definitions/TnsgetChargingPlan2AppEntities";
import { TnsgetChargingPlan2AppEntitiesResponse } from "./definitions/TnsgetChargingPlan2AppEntitiesResponse";
import { TnsgetChargingApplicationEntityByName } from "./definitions/TnsgetChargingApplicationEntityByName";
import { TnsgetChargingApplicationEntityByNameResponse } from "./definitions/TnsgetChargingApplicationEntityByNameResponse";
import { TnsgetSmpRadiusTargets } from "./definitions/TnsgetSmpRadiusTargets";
import { TnsgetSmpRadiusTargetsResponse } from "./definitions/TnsgetSmpRadiusTargetsResponse";
import { TnssetDataExportConfig } from "./definitions/TnssetDataExportConfig";
import { TnssetDataExportConfigResponse } from "./definitions/TnssetDataExportConfigResponse";
import { TnsgetCocCatalogEntries } from "./definitions/TnsgetCocCatalogEntries";
import { TnsgetCocCatalogEntriesResponse } from "./definitions/TnsgetCocCatalogEntriesResponse";
import { TnsgetHostGroupIdByName } from "./definitions/TnsgetHostGroupIdByName";
import { TnsgetHostGroupIdByNameResponse } from "./definitions/TnsgetHostGroupIdByNameResponse";
import { TnsaddSubscriberId } from "./definitions/TnsaddSubscriberId";
import { TnsaddSubscriberIdResponse } from "./definitions/TnsaddSubscriberIdResponse";
import { TnsdeleteVlanCatalogEntries } from "./definitions/TnsdeleteVlanCatalogEntries";
import { TnsdeleteVlanCatalogEntriesResponse } from "./definitions/TnsdeleteVlanCatalogEntriesResponse";
import { TnsgetClientDeviceEntries } from "./definitions/TnsgetClientDeviceEntries";
import { TnsgetClientDeviceEntriesResponse } from "./definitions/TnsgetClientDeviceEntriesResponse";
import { TnsgetSubscriberInstances } from "./definitions/TnsgetSubscriberInstances";
import { TnsgetSubscriberInstancesResponse } from "./definitions/TnsgetSubscriberInstancesResponse";
import { TnsgetCmtasReportStatus } from "./definitions/TnsgetCmtasReportStatus";
import { TnsgetCmtasReportStatusResponse } from "./definitions/TnsgetCmtasReportStatusResponse";
import { TnsgetWebSafeUsers } from "./definitions/TnsgetWebSafeUsers";
import { TnsgetWebSafeUsersResponse } from "./definitions/TnsgetWebSafeUsersResponse";
import { TnsgetVcs } from "./definitions/TnsgetVcs";
import { TnsgetVcsResponse } from "./definitions/TnsgetVcsResponse";
import { TnssetEnterpriseAddedServicesTopicDto } from "./definitions/TnssetEnterpriseAddedServicesTopicDto";
import { TnssetEnterpriseAddedServicesTopicDtoResponse } from "./definitions/TnssetEnterpriseAddedServicesTopicDtoResponse";
import { TnsgetRedundantUnitByDevice } from "./definitions/TnsgetRedundantUnitByDevice";
import { TnsgetRedundantUnitByDeviceResponse } from "./definitions/TnsgetRedundantUnitByDeviceResponse";
import { TnsaddServiceGroups } from "./definitions/TnsaddServiceGroups";
import { TnsaddServiceGroupsResponse } from "./definitions/TnsaddServiceGroupsResponse";
import { TnsupdateAlertCatalogEntries } from "./definitions/TnsupdateAlertCatalogEntries";
import { TnsupdateAlertCatalogEntriesResponse } from "./definitions/TnsupdateAlertCatalogEntriesResponse";
import { TnsgetPolicyDistributionGroups } from "./definitions/TnsgetPolicyDistributionGroups";
import { TnsgetPolicyDistributionGroupsResponse } from "./definitions/TnsgetPolicyDistributionGroupsResponse";
import { TnsgetDmOutputProfileByTypeAndName } from "./definitions/TnsgetDmOutputProfileByTypeAndName";
import { TnsgetDmOutputProfileByTypeAndNameResponse } from "./definitions/TnsgetDmOutputProfileByTypeAndNameResponse";
import { TnsgetBlackListCategories } from "./definitions/TnsgetBlackListCategories";
import { TnsgetBlackListCategoriesResponse } from "./definitions/TnsgetBlackListCategoriesResponse";
import { TnsupdateNetworkDomains } from "./definitions/TnsupdateNetworkDomains";
import { TnsupdateNetworkDomainsResponse } from "./definitions/TnsupdateNetworkDomainsResponse";
import { TnsgetQosIdByName } from "./definitions/TnsgetQosIdByName";
import { TnsgetQosIdByNameResponse } from "./definitions/TnsgetQosIdByNameResponse";
import { TnssetEnterpriseGeneralTopicDto } from "./definitions/TnssetEnterpriseGeneralTopicDto";
import { TnssetEnterpriseGeneralTopicDtoResponse } from "./definitions/TnssetEnterpriseGeneralTopicDtoResponse";
import { TnsupdateNppAccount } from "./definitions/TnsupdateNppAccount";
import { TnsupdateNppAccountResponse } from "./definitions/TnsupdateNppAccountResponse";
import { TnsupdateWuServer } from "./definitions/TnsupdateWuServer";
import { TnsupdateWuServerResponse } from "./definitions/TnsupdateWuServerResponse";
import { TnsgetSecretKey } from "./definitions/TnsgetSecretKey";
import { TnsgetSecretKeyResponse } from "./definitions/TnsgetSecretKeyResponse";
import { TnsupdateAutonomousSystemEntries } from "./definitions/TnsupdateAutonomousSystemEntries";
import { TnsupdateAutonomousSystemEntriesResponse } from "./definitions/TnsupdateAutonomousSystemEntriesResponse";
import { TnsexportPolicy } from "./definitions/TnsexportPolicy";
import { TnsexportPolicyResponse } from "./definitions/TnsexportPolicyResponse";
import { TnsaddVlanCatalogEntries } from "./definitions/TnsaddVlanCatalogEntries";
import { TnsaddVlanCatalogEntriesResponse } from "./definitions/TnsaddVlanCatalogEntriesResponse";
import { TnsremoveRtFilters } from "./definitions/TnsremoveRtFilters";
import { TnsremoveRtFiltersResponse } from "./definitions/TnsremoveRtFiltersResponse";
import { TnsdeleteWebSafeUser } from "./definitions/TnsdeleteWebSafeUser";
import { TnsdeleteWebSafeUserResponse } from "./definitions/TnsdeleteWebSafeUserResponse";
import { TnsupdateFacebookTrafficControlDto } from "./definitions/TnsupdateFacebookTrafficControlDto";
import { TnsupdateFacebookTrafficControlDtoResponse } from "./definitions/TnsupdateFacebookTrafficControlDtoResponse";
import { TnsupdateTubeGroups } from "./definitions/TnsupdateTubeGroups";
import { TnsupdateTubeGroupsResponse } from "./definitions/TnsupdateTubeGroupsResponse";
import { TnsupdateServicePlanAddOnEntries } from "./definitions/TnsupdateServicePlanAddOnEntries";
import { TnsupdateServicePlanAddOnEntriesResponse } from "./definitions/TnsupdateServicePlanAddOnEntriesResponse";
import { TnsgetHheIdByName } from "./definitions/TnsgetHheIdByName";
import { TnsgetHheIdByNameResponse } from "./definitions/TnsgetHheIdByNameResponse";
import { TnsisNetAwareness } from "./definitions/TnsisNetAwareness";
import { TnsisNetAwarenessResponse } from "./definitions/TnsisNetAwarenessResponse";
import { TnsgetVlanGroupIdByName } from "./definitions/TnsgetVlanGroupIdByName";
import { TnsgetVlanGroupIdByNameResponse } from "./definitions/TnsgetVlanGroupIdByNameResponse";
import { TnsgetChargingPlanEntries } from "./definitions/TnsgetChargingPlanEntries";
import { TnsgetChargingPlanEntriesResponse } from "./definitions/TnsgetChargingPlanEntriesResponse";
import { TnsgetHostsByNames } from "./definitions/TnsgetHostsByNames";
import { TnsgetHostsByNamesResponse } from "./definitions/TnsgetHostsByNamesResponse";
import { TnsgetAllNeDevice } from "./definitions/TnsgetAllNeDevice";
import { TnsgetAllNeDeviceResponse } from "./definitions/TnsgetAllNeDeviceResponse";
import { TnssaveControlPlaneIdentifierNames } from "./definitions/TnssaveControlPlaneIdentifierNames";
import { TnssaveControlPlaneIdentifierNamesResponse } from "./definitions/TnssaveControlPlaneIdentifierNamesResponse";
import { TnsgetWebSafeUserIdByName } from "./definitions/TnsgetWebSafeUserIdByName";
import { TnsgetWebSafeUserIdByNameResponse } from "./definitions/TnsgetWebSafeUserIdByNameResponse";
import { TnsupdateQosCatalogEntries } from "./definitions/TnsupdateQosCatalogEntries";
import { TnsupdateQosCatalogEntriesResponse } from "./definitions/TnsupdateQosCatalogEntriesResponse";
import { TnsupdateTosCatalogEntries } from "./definitions/TnsupdateTosCatalogEntries";
import { TnsupdateTosCatalogEntriesResponse } from "./definitions/TnsupdateTosCatalogEntriesResponse";
import { TnsupdateSmpGroup } from "./definitions/TnsupdateSmpGroup";
import { TnsupdateSmpGroupResponse } from "./definitions/TnsupdateSmpGroupResponse";
import { TnsgetClientDeviceGroupEntriesByIds } from "./definitions/TnsgetClientDeviceGroupEntriesByIds";
import { TnsgetClientDeviceGroupEntriesByIdsResponse } from "./definitions/TnsgetClientDeviceGroupEntriesByIdsResponse";
import { TnssetProxyServer } from "./definitions/TnssetProxyServer";
import { TnssetProxyServerResponse } from "./definitions/TnssetProxyServerResponse";
import { TnsgetHostGroupByIds } from "./definitions/TnsgetHostGroupByIds";
import { TnsgetHostGroupByIdsResponse } from "./definitions/TnsgetHostGroupByIdsResponse";
import { TnsdeleteAlertCatalogEntries } from "./definitions/TnsdeleteAlertCatalogEntries";
import { TnsdeleteAlertCatalogEntriesResponse } from "./definitions/TnsdeleteAlertCatalogEntriesResponse";
import { TnsrollbackWuDevice } from "./definitions/TnsrollbackWuDevice";
import { TnsrollbackWuDeviceResponse } from "./definitions/TnsrollbackWuDeviceResponse";
import { TnsgetGroupMemberIdByServiceId } from "./definitions/TnsgetGroupMemberIdByServiceId";
import { TnsgetGroupMemberIdByServiceIdResponse } from "./definitions/TnsgetGroupMemberIdByServiceIdResponse";
import { TnsupdateMobileDeviceDb } from "./definitions/TnsupdateMobileDeviceDb";
import { TnsupdateMobileDeviceDbResponse } from "./definitions/TnsupdateMobileDeviceDbResponse";
import { TnsupdateVsCatalogEntries } from "./definitions/TnsupdateVsCatalogEntries";
import { TnsupdateVsCatalogEntriesResponse } from "./definitions/TnsupdateVsCatalogEntriesResponse";
import { TnsgetCocGroupEntriesByIds } from "./definitions/TnsgetCocGroupEntriesByIds";
import { TnsgetCocGroupEntriesByIdsResponse } from "./definitions/TnsgetCocGroupEntriesByIdsResponse";
import { TnsgetQuotaPlans } from "./definitions/TnsgetQuotaPlans";
import { TnsgetQuotaPlansResponse } from "./definitions/TnsgetQuotaPlansResponse";
import { TnsgetPortsTopicDto } from "./definitions/TnsgetPortsTopicDto";
import { TnsgetPortsTopicDtoResponse } from "./definitions/TnsgetPortsTopicDtoResponse";
import { TnsdeleteHheCatalogEntries } from "./definitions/TnsdeleteHheCatalogEntries";
import { TnsdeleteHheCatalogEntriesResponse } from "./definitions/TnsdeleteHheCatalogEntriesResponse";
import { TnsupdateApplicationEntities } from "./definitions/TnsupdateApplicationEntities";
import { TnsupdateApplicationEntitiesResponse } from "./definitions/TnsupdateApplicationEntitiesResponse";
import { TnsgetQosEntriesByIds } from "./definitions/TnsgetQosEntriesByIds";
import { TnsgetQosEntriesByIdsResponse } from "./definitions/TnsgetQosEntriesByIdsResponse";
import { TnsupdateTubeTca } from "./definitions/TnsupdateTubeTca";
import { TnsupdateTubeTcaResponse } from "./definitions/TnsupdateTubeTcaResponse";
import { TnsgetAllCsSystems } from "./definitions/TnsgetAllCsSystems";
import { TnsgetAllCsSystemsResponse } from "./definitions/TnsgetAllCsSystemsResponse";
import { TnsgetQuotaRulesByIds } from "./definitions/TnsgetQuotaRulesByIds";
import { TnsgetQuotaRulesByIdsResponse } from "./definitions/TnsgetQuotaRulesByIdsResponse";
import { TnssetFacebookPollingTimeInterval } from "./definitions/TnssetFacebookPollingTimeInterval";
import { TnssetFacebookPollingTimeIntervalResponse } from "./definitions/TnssetFacebookPollingTimeIntervalResponse";
import { TnsdeleteMdDevice } from "./definitions/TnsdeleteMdDevice";
import { TnsdeleteMdDeviceResponse } from "./definitions/TnsdeleteMdDeviceResponse";
import { TnsupdateAutonomousSystemFile } from "./definitions/TnsupdateAutonomousSystemFile";
import { TnsupdateAutonomousSystemFileResponse } from "./definitions/TnsupdateAutonomousSystemFileResponse";
import { TnsupdateTimeCatalogEntries } from "./definitions/TnsupdateTimeCatalogEntries";
import { TnsupdateTimeCatalogEntriesResponse } from "./definitions/TnsupdateTimeCatalogEntriesResponse";
import { TnsgetAllChargingConditionsByPolicy } from "./definitions/TnsgetAllChargingConditionsByPolicy";
import { TnsgetAllChargingConditionsByPolicyResponse } from "./definitions/TnsgetAllChargingConditionsByPolicyResponse";
import { TnsgetvlanCatalogEntries } from "./definitions/TnsgetvlanCatalogEntries";
import { TnsgetvlanCatalogEntriesResponse } from "./definitions/TnsgetvlanCatalogEntriesResponse";
import { TnsloadWebSafeImportFile } from "./definitions/TnsloadWebSafeImportFile";
import { TnsloadWebSafeImportFileResponse } from "./definitions/TnsloadWebSafeImportFileResponse";
import { TnsupdatePolicy } from "./definitions/TnsupdatePolicy";
import { TnsupdatePolicyResponse } from "./definitions/TnsupdatePolicyResponse";
import { TnsdeleteServiceCatalogEntries } from "./definitions/TnsdeleteServiceCatalogEntries";
import { TnsdeleteServiceCatalogEntriesResponse } from "./definitions/TnsdeleteServiceCatalogEntriesResponse";
import { TnsgetAllParameters } from "./definitions/TnsgetAllParameters";
import { TnsgetAllParametersResponse } from "./definitions/TnsgetAllParametersResponse";
import { TnscreateAsymGroups } from "./definitions/TnscreateAsymGroups";
import { TnscreateAsymGroupsResponse } from "./definitions/TnscreateAsymGroupsResponse";
import { TnssaveBlackListCategories } from "./definitions/TnssaveBlackListCategories";
import { TnssaveBlackListCategoriesResponse } from "./definitions/TnssaveBlackListCategoriesResponse";
import { TnsgetHostGroupsByNames } from "./definitions/TnsgetHostGroupsByNames";
import { TnsgetHostGroupsByNamesResponse } from "./definitions/TnsgetHostGroupsByNamesResponse";
import { TnssaveBlackList } from "./definitions/TnssaveBlackList";
import { TnssaveBlackListResponse } from "./definitions/TnssaveBlackListResponse";
import { TnsgetServicePlanAddOnEntriesByIds } from "./definitions/TnsgetServicePlanAddOnEntriesByIds";
import { TnsgetServicePlanAddOnEntriesByIdsResponse } from "./definitions/TnsgetServicePlanAddOnEntriesByIdsResponse";
import { TnsgetUserIdByName } from "./definitions/TnsgetUserIdByName";
import { TnsgetUserIdByNameResponse } from "./definitions/TnsgetUserIdByNameResponse";
import { TnsupdateQuotaPlans } from "./definitions/TnsupdateQuotaPlans";
import { TnsupdateQuotaPlansResponse } from "./definitions/TnsupdateQuotaPlansResponse";
import { TnsgetAlertIdByName } from "./definitions/TnsgetAlertIdByName";
import { TnsgetAlertIdByNameResponse } from "./definitions/TnsgetAlertIdByNameResponse";
import { TnsaddIfcGroupCatalogEntries } from "./definitions/TnsaddIfcGroupCatalogEntries";
import { TnsaddIfcGroupCatalogEntriesResponse } from "./definitions/TnsaddIfcGroupCatalogEntriesResponse";
import { TnsisQuotaAvilable } from "./definitions/TnsisQuotaAvilable";
import { TnsisQuotaAvilableResponse } from "./definitions/TnsisQuotaAvilableResponse";
import { TnsaddVlanGroupCatalogEntries } from "./definitions/TnsaddVlanGroupCatalogEntries";
import { TnsaddVlanGroupCatalogEntriesResponse } from "./definitions/TnsaddVlanGroupCatalogEntriesResponse";
import { TnsgetFacebookRevisionConfiguration } from "./definitions/TnsgetFacebookRevisionConfiguration";
import { TnsgetFacebookRevisionConfigurationResponse } from "./definitions/TnsgetFacebookRevisionConfigurationResponse";
import { TnsgetAllAlarms } from "./definitions/TnsgetAllAlarms";
import { TnsgetAllAlarmsResponse } from "./definitions/TnsgetAllAlarmsResponse";
import { TnsisRoutingMapBelongToDefaultNetworkDomain } from "./definitions/TnsisRoutingMapBelongToDefaultNetworkDomain";
import { TnsisRoutingMapBelongToDefaultNetworkDomainResponse } from "./definitions/TnsisRoutingMapBelongToDefaultNetworkDomainResponse";
import { TnsaddGreGroupCatalogEntries } from "./definitions/TnsaddGreGroupCatalogEntries";
import { TnsaddGreGroupCatalogEntriesResponse } from "./definitions/TnsaddGreGroupCatalogEntriesResponse";
import { TnsgetQoeRuleDefEntriesByIds } from "./definitions/TnsgetQoeRuleDefEntriesByIds";
import { TnsgetQoeRuleDefEntriesByIdsResponse } from "./definitions/TnsgetQoeRuleDefEntriesByIdsResponse";
import { TnsdeleteIfcPortCatalogEntries } from "./definitions/TnsdeleteIfcPortCatalogEntries";
import { TnsdeleteIfcPortCatalogEntriesResponse } from "./definitions/TnsdeleteIfcPortCatalogEntriesResponse";
import { TnsupdateGreGroupCatalogEntries } from "./definitions/TnsupdateGreGroupCatalogEntries";
import { TnsupdateGreGroupCatalogEntriesResponse } from "./definitions/TnsupdateGreGroupCatalogEntriesResponse";
import { TnsgetTosIdByName } from "./definitions/TnsgetTosIdByName";
import { TnsgetTosIdByNameResponse } from "./definitions/TnsgetTosIdByNameResponse";
import { TnsdeleteIfcGroupCatalogEntries } from "./definitions/TnsdeleteIfcGroupCatalogEntries";
import { TnsdeleteIfcGroupCatalogEntriesResponse } from "./definitions/TnsdeleteIfcGroupCatalogEntriesResponse";
import { TnsgetProxyServer } from "./definitions/TnsgetProxyServer";
import { TnsgetProxyServerResponse } from "./definitions/TnsgetProxyServerResponse";
import { TnsgetSgTopic } from "./definitions/TnsgetSgTopic";
import { TnsgetSgTopicResponse } from "./definitions/TnsgetSgTopicResponse";
import { TnsgetTubeGroups } from "./definitions/TnsgetTubeGroups";
import { TnsgetTubeGroupsResponse } from "./definitions/TnsgetTubeGroupsResponse";
import { TnsmodifyRemoteNxs } from "./definitions/TnsmodifyRemoteNxs";
import { TnsmodifyRemoteNxsResponse } from "./definitions/TnsmodifyRemoteNxsResponse";
import { TnsgetLicenseVersion } from "./definitions/TnsgetLicenseVersion";
import { TnsgetLicenseVersionResponse } from "./definitions/TnsgetLicenseVersionResponse";
import { TnsgetClientDeviceIdByName } from "./definitions/TnsgetClientDeviceIdByName";
import { TnsgetClientDeviceIdByNameResponse } from "./definitions/TnsgetClientDeviceIdByNameResponse";
import { TnsgetDataExportConfig } from "./definitions/TnsgetDataExportConfig";
import { TnsgetDataExportConfigResponse } from "./definitions/TnsgetDataExportConfigResponse";
import { TnsgetGreIdByName } from "./definitions/TnsgetGreIdByName";
import { TnsgetGreIdByNameResponse } from "./definitions/TnsgetGreIdByNameResponse";
import { TnsgetHostIdByName } from "./definitions/TnsgetHostIdByName";
import { TnsgetHostIdByNameResponse } from "./definitions/TnsgetHostIdByNameResponse";
import { TnsgetAllApplicationEntities } from "./definitions/TnsgetAllApplicationEntities";
import { TnsgetAllApplicationEntitiesResponse } from "./definitions/TnsgetAllApplicationEntitiesResponse";
import { TnsaddChargingRule } from "./definitions/TnsaddChargingRule";
import { TnsaddChargingRuleResponse } from "./definitions/TnsaddChargingRuleResponse";
import { TnsgetTosEntriesByIds } from "./definitions/TnsgetTosEntriesByIds";
import { TnsgetTosEntriesByIdsResponse } from "./definitions/TnsgetTosEntriesByIdsResponse";
import { TnsreloadProductCapabilities } from "./definitions/TnsreloadProductCapabilities";
import { TnsreloadProductCapabilitiesResponse } from "./definitions/TnsreloadProductCapabilitiesResponse";
import { TnsgetTubeDto1 } from "./definitions/TnsgetTubeDto1";
import { TnsgetTubeDto1Response } from "./definitions/TnsgetTubeDto1Response";
import { TnsdeleteGreGroupCatalogEntries } from "./definitions/TnsdeleteGreGroupCatalogEntries";
import { TnsdeleteGreGroupCatalogEntriesResponse } from "./definitions/TnsdeleteGreGroupCatalogEntriesResponse";
import { TnssetDeviceSecurityTopic } from "./definitions/TnssetDeviceSecurityTopic";
import { TnssetDeviceSecurityTopicResponse } from "./definitions/TnssetDeviceSecurityTopicResponse";
import { TnsdumpCache } from "./definitions/TnsdumpCache";
import { TnsdumpCacheResponse } from "./definitions/TnsdumpCacheResponse";
import { TnsgetPolicyIdByName } from "./definitions/TnsgetPolicyIdByName";
import { TnsgetPolicyIdByNameResponse } from "./definitions/TnsgetPolicyIdByNameResponse";
import { TnsgetNetworkDomainsByIds } from "./definitions/TnsgetNetworkDomainsByIds";
import { TnsgetNetworkDomainsByIdsResponse } from "./definitions/TnsgetNetworkDomainsByIdsResponse";
import { TnsgetQoeRuleDefCatalogEntries } from "./definitions/TnsgetQoeRuleDefCatalogEntries";
import { TnsgetQoeRuleDefCatalogEntriesResponse } from "./definitions/TnsgetQoeRuleDefCatalogEntriesResponse";
import { TnsgetRemoteNxEntities } from "./definitions/TnsgetRemoteNxEntities";
import { TnsgetRemoteNxEntitiesResponse } from "./definitions/TnsgetRemoteNxEntitiesResponse";
import { TnsgetDefaultAggregations } from "./definitions/TnsgetDefaultAggregations";
import { TnsgetDefaultAggregationsResponse } from "./definitions/TnsgetDefaultAggregationsResponse";
import { TnssetParameters } from "./definitions/TnssetParameters";
import { TnssetParametersResponse } from "./definitions/TnssetParametersResponse";
import { TnsgetContentKeyId } from "./definitions/TnsgetContentKeyId";
import { TnsgetContentKeyIdResponse } from "./definitions/TnsgetContentKeyIdResponse";
import { TnsaddAutonomousSystemEntries } from "./definitions/TnsaddAutonomousSystemEntries";
import { TnsaddAutonomousSystemEntriesResponse } from "./definitions/TnsaddAutonomousSystemEntriesResponse";
import { TnsdeleteServicePlanAddOnEntries } from "./definitions/TnsdeleteServicePlanAddOnEntries";
import { TnsdeleteServicePlanAddOnEntriesResponse } from "./definitions/TnsdeleteServicePlanAddOnEntriesResponse";
import { TnsgetBlackList } from "./definitions/TnsgetBlackList";
import { TnsgetBlackListResponse } from "./definitions/TnsgetBlackListResponse";
import { TnsupdateQoeRuleDefCatalogEntries } from "./definitions/TnsupdateQoeRuleDefCatalogEntries";
import { TnsupdateQoeRuleDefCatalogEntriesResponse } from "./definitions/TnsupdateQoeRuleDefCatalogEntriesResponse";
import { TnsremoveNppAccounts } from "./definitions/TnsremoveNppAccounts";
import { TnsremoveNppAccountsResponse } from "./definitions/TnsremoveNppAccountsResponse";
import { TnsgetAllChargingRuleByPolicy } from "./definitions/TnsgetAllChargingRuleByPolicy";
import { TnsgetAllChargingRuleByPolicyResponse } from "./definitions/TnsgetAllChargingRuleByPolicyResponse";
import { TnsfetchCellSectors } from "./definitions/TnsfetchCellSectors";
import { TnsfetchCellSectorsResponse } from "./definitions/TnsfetchCellSectorsResponse";
import { TnsaddNppAccount } from "./definitions/TnsaddNppAccount";
import { TnsaddNppAccountResponse } from "./definitions/TnsaddNppAccountResponse";
import { TnsdeleteCocGroupCatalogEntries } from "./definitions/TnsdeleteCocGroupCatalogEntries";
import { TnsdeleteCocGroupCatalogEntriesResponse } from "./definitions/TnsdeleteCocGroupCatalogEntriesResponse";
import { TnsaddBiHaGroup } from "./definitions/TnsaddBiHaGroup";
import { TnsaddBiHaGroupResponse } from "./definitions/TnsaddBiHaGroupResponse";
import { TnsupdateDmGlobalInputFilteringRuleEntities } from "./definitions/TnsupdateDmGlobalInputFilteringRuleEntities";
import { TnsupdateDmGlobalInputFilteringRuleEntitiesResponse } from "./definitions/TnsupdateDmGlobalInputFilteringRuleEntitiesResponse";
import { TnsgetUserSpecificServiceEntities } from "./definitions/TnsgetUserSpecificServiceEntities";
import { TnsgetUserSpecificServiceEntitiesResponse } from "./definitions/TnsgetUserSpecificServiceEntitiesResponse";
import { TnsupdateDosCatalogEntries } from "./definitions/TnsupdateDosCatalogEntries";
import { TnsupdateDosCatalogEntriesResponse } from "./definitions/TnsupdateDosCatalogEntriesResponse";
import { TnsaddHheCatalogEntries } from "./definitions/TnsaddHheCatalogEntries";
import { TnsaddHheCatalogEntriesResponse } from "./definitions/TnsaddHheCatalogEntriesResponse";
import { TnsgetGreGroupIdByName } from "./definitions/TnsgetGreGroupIdByName";
import { TnsgetGreGroupIdByNameResponse } from "./definitions/TnsgetGreGroupIdByNameResponse";
import { TnsgetTosCatalogEntries } from "./definitions/TnsgetTosCatalogEntries";
import { TnsgetTosCatalogEntriesResponse } from "./definitions/TnsgetTosCatalogEntriesResponse";
import { TnsaddTimeCatalogEntries } from "./definitions/TnsaddTimeCatalogEntries";
import { TnsaddTimeCatalogEntriesResponse } from "./definitions/TnsaddTimeCatalogEntriesResponse";
import { TnsgetAllNetworkDomains } from "./definitions/TnsgetAllNetworkDomains";
import { TnsgetAllNetworkDomainsResponse } from "./definitions/TnsgetAllNetworkDomainsResponse";
import { TnsisSupportedProperty } from "./definitions/TnsisSupportedProperty";
import { TnsisSupportedPropertyResponse } from "./definitions/TnsisSupportedPropertyResponse";
import { TnsgetQosCatalogEntries } from "./definitions/TnsgetQosCatalogEntries";
import { TnsgetQosCatalogEntriesResponse } from "./definitions/TnsgetQosCatalogEntriesResponse";
import { TnsdeleteSmpGroup } from "./definitions/TnsdeleteSmpGroup";
import { TnsdeleteSmpGroupResponse } from "./definitions/TnsdeleteSmpGroupResponse";
import { TnsdeleteHostCatalogEntries } from "./definitions/TnsdeleteHostCatalogEntries";
import { TnsdeleteHostCatalogEntriesResponse } from "./definitions/TnsdeleteHostCatalogEntriesResponse";
import { TnsaddTubeGroups } from "./definitions/TnsaddTubeGroups";
import { TnsaddTubeGroupsResponse } from "./definitions/TnsaddTubeGroupsResponse";
import { TnsgetServiceGroups } from "./definitions/TnsgetServiceGroups";
import { TnsgetServiceGroupsResponse } from "./definitions/TnsgetServiceGroupsResponse";
import { TnsgetChargingPlan2AppEntitieaByName } from "./definitions/TnsgetChargingPlan2AppEntitieaByName";
import { TnsgetChargingPlan2AppEntitieaByNameResponse } from "./definitions/TnsgetChargingPlan2AppEntitieaByNameResponse";
import { TnsfindCsEtlCountByCollectorId } from "./definitions/TnsfindCsEtlCountByCollectorId";
import { TnsfindCsEtlCountByCollectorIdResponse } from "./definitions/TnsfindCsEtlCountByCollectorIdResponse";
import { TnsgetDmGlobalTriggerTimeout } from "./definitions/TnsgetDmGlobalTriggerTimeout";
import { TnsgetDmGlobalTriggerTimeoutResponse } from "./definitions/TnsgetDmGlobalTriggerTimeoutResponse";
import { TnsgetIfcGroupCatalogEntries } from "./definitions/TnsgetIfcGroupCatalogEntries";
import { TnsgetIfcGroupCatalogEntriesResponse } from "./definitions/TnsgetIfcGroupCatalogEntriesResponse";
import { TnsisFeatureEnabled } from "./definitions/TnsisFeatureEnabled";
import { TnsisFeatureEnabledResponse } from "./definitions/TnsisFeatureEnabledResponse";
import { TnsaddVsCatalogEntries } from "./definitions/TnsaddVsCatalogEntries";
import { TnsaddVsCatalogEntriesResponse } from "./definitions/TnsaddVsCatalogEntriesResponse";
import { TnsgetCocGroupCatalogEntries } from "./definitions/TnsgetCocGroupCatalogEntries";
import { TnsgetCocGroupCatalogEntriesResponse } from "./definitions/TnsgetCocGroupCatalogEntriesResponse";
import { TnsdeleteQuotaPlans } from "./definitions/TnsdeleteQuotaPlans";
import { TnsdeleteQuotaPlansResponse } from "./definitions/TnsdeleteQuotaPlansResponse";
import { TnsgetNetUnitInterfaceStatus } from "./definitions/TnsgetNetUnitInterfaceStatus";
import { TnsgetNetUnitInterfaceStatusResponse } from "./definitions/TnsgetNetUnitInterfaceStatusResponse";
import { TnsgetTubeTcAs } from "./definitions/TnsgetTubeTcAs";
import { TnsgetTubeTcAsResponse } from "./definitions/TnsgetTubeTcAsResponse";
import { TnsupdateVlanCatalogEntries } from "./definitions/TnsupdateVlanCatalogEntries";
import { TnsupdateVlanCatalogEntriesResponse } from "./definitions/TnsupdateVlanCatalogEntriesResponse";
import { TnsaddServiceCatalogEntries } from "./definitions/TnsaddServiceCatalogEntries";
import { TnsaddServiceCatalogEntriesResponse } from "./definitions/TnsaddServiceCatalogEntriesResponse";
import { TnsgetCocIdByName } from "./definitions/TnsgetCocIdByName";
import { TnsgetCocIdByNameResponse } from "./definitions/TnsgetCocIdByNameResponse";
import { TnsgetChargingPlanEntityByName } from "./definitions/TnsgetChargingPlanEntityByName";
import { TnsgetChargingPlanEntityByNameResponse } from "./definitions/TnsgetChargingPlanEntityByNameResponse";
import { TnsupdateMdDevice } from "./definitions/TnsupdateMdDevice";
import { TnsupdateMdDeviceResponse } from "./definitions/TnsupdateMdDeviceResponse";
import { TnsdeleteAutonomousSystemFile } from "./definitions/TnsdeleteAutonomousSystemFile";
import { TnsdeleteAutonomousSystemFileResponse } from "./definitions/TnsdeleteAutonomousSystemFileResponse";
import { TnssetDmEncryptionKey } from "./definitions/TnssetDmEncryptionKey";
import { TnssetDmEncryptionKeyResponse } from "./definitions/TnssetDmEncryptionKeyResponse";
import { TnsgetEnterpriseSnmpTopicDto } from "./definitions/TnsgetEnterpriseSnmpTopicDto";
import { TnsgetEnterpriseSnmpTopicDtoResponse } from "./definitions/TnsgetEnterpriseSnmpTopicDtoResponse";
import { TnsupdateCocCatalogEntries } from "./definitions/TnsupdateCocCatalogEntries";
import { TnsupdateCocCatalogEntriesResponse } from "./definitions/TnsupdateCocCatalogEntriesResponse";
import { TnsgetEnterpriseServersTopicDto } from "./definitions/TnsgetEnterpriseServersTopicDto";
import { TnsgetEnterpriseServersTopicDtoResponse } from "./definitions/TnsgetEnterpriseServersTopicDtoResponse";
import { TnsgetDmGlobalInputFilteringRuleXml } from "./definitions/TnsgetDmGlobalInputFilteringRuleXml";
import { TnsgetDmGlobalInputFilteringRuleXmlResponse } from "./definitions/TnsgetDmGlobalInputFilteringRuleXmlResponse";
import { TnsdeleteEventActionCatalogEntries } from "./definitions/TnsdeleteEventActionCatalogEntries";
import { TnsdeleteEventActionCatalogEntriesResponse } from "./definitions/TnsdeleteEventActionCatalogEntriesResponse";
import { TnsgetSyslogConnections } from "./definitions/TnsgetSyslogConnections";
import { TnsgetSyslogConnectionsResponse } from "./definitions/TnsgetSyslogConnectionsResponse";
import { TnssetConfiguration } from "./definitions/TnssetConfiguration";
import { TnssetConfigurationResponse } from "./definitions/TnssetConfigurationResponse";
import { TnsaddTosCatalogEntries } from "./definitions/TnsaddTosCatalogEntries";
import { TnsaddTosCatalogEntriesResponse } from "./definitions/TnsaddTosCatalogEntriesResponse";
import { TnsaddQoeRuleDefCatalogEntries } from "./definitions/TnsaddQoeRuleDefCatalogEntries";
import { TnsaddQoeRuleDefCatalogEntriesResponse } from "./definitions/TnsaddQoeRuleDefCatalogEntriesResponse";
import { TnssetEncryptedDatabasePassword } from "./definitions/TnssetEncryptedDatabasePassword";
import { TnssetEncryptedDatabasePasswordResponse } from "./definitions/TnssetEncryptedDatabasePasswordResponse";
import { TnsaddQosCatalogEntries } from "./definitions/TnsaddQosCatalogEntries";
import { TnsaddQosCatalogEntriesResponse } from "./definitions/TnsaddQosCatalogEntriesResponse";
import { TnsaddRtFilters } from "./definitions/TnsaddRtFilters";
import { TnsaddRtFiltersResponse } from "./definitions/TnsaddRtFiltersResponse";
import { TnsdeleteQuotaRules } from "./definitions/TnsdeleteQuotaRules";
import { TnsdeleteQuotaRulesResponse } from "./definitions/TnsdeleteQuotaRulesResponse";
import { TnsupdateVlanGroupCatalogEntries } from "./definitions/TnsupdateVlanGroupCatalogEntries";
import { TnsupdateVlanGroupCatalogEntriesResponse } from "./definitions/TnsupdateVlanGroupCatalogEntriesResponse";
import { TnsupdateSmpRadiusTargets } from "./definitions/TnsupdateSmpRadiusTargets";
import { TnsupdateSmpRadiusTargetsResponse } from "./definitions/TnsupdateSmpRadiusTargetsResponse";
import { TnsgetFacebookTrafficControlDto } from "./definitions/TnsgetFacebookTrafficControlDto";
import { TnsgetFacebookTrafficControlDtoResponse } from "./definitions/TnsgetFacebookTrafficControlDtoResponse";
import { TnsgetRemoteNxsByNames } from "./definitions/TnsgetRemoteNxsByNames";
import { TnsgetRemoteNxsByNamesResponse } from "./definitions/TnsgetRemoteNxsByNamesResponse";
import { TnsgetDeviceByName } from "./definitions/TnsgetDeviceByName";
import { TnsgetDeviceByNameResponse } from "./definitions/TnsgetDeviceByNameResponse";
import { TnsgetHheCatalogEntries } from "./definitions/TnsgetHheCatalogEntries";
import { TnsgetHheCatalogEntriesResponse } from "./definitions/TnsgetHheCatalogEntriesResponse";
import { TnssetDmGlobalTriggerTimeout } from "./definitions/TnssetDmGlobalTriggerTimeout";
import { TnssetDmGlobalTriggerTimeoutResponse } from "./definitions/TnssetDmGlobalTriggerTimeoutResponse";
import { TnsgetChargingAppIdByName } from "./definitions/TnsgetChargingAppIdByName";
import { TnsgetChargingAppIdByNameResponse } from "./definitions/TnsgetChargingAppIdByNameResponse";
import { TnsgetIfcPortCatalogEntries } from "./definitions/TnsgetIfcPortCatalogEntries";
import { TnsgetIfcPortCatalogEntriesResponse } from "./definitions/TnsgetIfcPortCatalogEntriesResponse";
import { TnsgetDeviceSecurityTopic } from "./definitions/TnsgetDeviceSecurityTopic";
import { TnsgetDeviceSecurityTopicResponse } from "./definitions/TnsgetDeviceSecurityTopicResponse";
import { TnsvalidateSsgExistence } from "./definitions/TnsvalidateSsgExistence";
import { TnsvalidateSsgExistenceResponse } from "./definitions/TnsvalidateSsgExistenceResponse";
import { TnsgetServiceDataByIds } from "./definitions/TnsgetServiceDataByIds";
import { TnsgetServiceDataByIdsResponse } from "./definitions/TnsgetServiceDataByIdsResponse";
import { TnsprepareToRedistribute } from "./definitions/TnsprepareToRedistribute";
import { TnsprepareToRedistributeResponse } from "./definitions/TnsprepareToRedistributeResponse";
import { TnssetNxLicense } from "./definitions/TnssetNxLicense";
import { TnssetNxLicenseResponse } from "./definitions/TnssetNxLicenseResponse";
import { TnsdeleteQosCatalogEntries } from "./definitions/TnsdeleteQosCatalogEntries";
import { TnsdeleteQosCatalogEntriesResponse } from "./definitions/TnsdeleteQosCatalogEntriesResponse";
import { TnsgetSmpSessionUpdatesAttributesFromTopic } from "./definitions/TnsgetSmpSessionUpdatesAttributesFromTopic";
import { TnsgetSmpSessionUpdatesAttributesFromTopicResponse } from "./definitions/TnsgetSmpSessionUpdatesAttributesFromTopicResponse";
import { TnsaddQuotaEntries } from "./definitions/TnsaddQuotaEntries";
import { TnsaddQuotaEntriesResponse } from "./definitions/TnsaddQuotaEntriesResponse";
import { TnsdeleteTosCatalogEntries } from "./definitions/TnsdeleteTosCatalogEntries";
import { TnsdeleteTosCatalogEntriesResponse } from "./definitions/TnsdeleteTosCatalogEntriesResponse";
import { TnsgetHostEntriesByIds } from "./definitions/TnsgetHostEntriesByIds";
import { TnsgetHostEntriesByIdsResponse } from "./definitions/TnsgetHostEntriesByIdsResponse";
import { TnsgetQuotaEntries } from "./definitions/TnsgetQuotaEntries";
import { TnsgetQuotaEntriesResponse } from "./definitions/TnsgetQuotaEntriesResponse";
import { TnsrollbackWuServer } from "./definitions/TnsrollbackWuServer";
import { TnsrollbackWuServerResponse } from "./definitions/TnsrollbackWuServerResponse";
import { TnsaddAlertCatalogEntries } from "./definitions/TnsaddAlertCatalogEntries";
import { TnsaddAlertCatalogEntriesResponse } from "./definitions/TnsaddAlertCatalogEntriesResponse";
import { TnsgetParameter } from "./definitions/TnsgetParameter";
import { TnsgetParameterResponse } from "./definitions/TnsgetParameterResponse";
import { TnssetDmFieldExtension } from "./definitions/TnssetDmFieldExtension";
import { TnssetDmFieldExtensionResponse } from "./definitions/TnssetDmFieldExtensionResponse";
import { TnssetPortsTopicDto } from "./definitions/TnssetPortsTopicDto";
import { TnssetPortsTopicDtoResponse } from "./definitions/TnssetPortsTopicDtoResponse";
import { TnsgetChargingPolicy } from "./definitions/TnsgetChargingPolicy";
import { TnsgetChargingPolicyResponse } from "./definitions/TnsgetChargingPolicyResponse";
import { TnsupdateQuotaRules } from "./definitions/TnsupdateQuotaRules";
import { TnsupdateQuotaRulesResponse } from "./definitions/TnsupdateQuotaRulesResponse";
import { TnsgetAllDmOutputRecords } from "./definitions/TnsgetAllDmOutputRecords";
import { TnsgetAllDmOutputRecordsResponse } from "./definitions/TnsgetAllDmOutputRecordsResponse";
import { TnsgetUserSpecificServiceByName } from "./definitions/TnsgetUserSpecificServiceByName";
import { TnsgetUserSpecificServiceByNameResponse } from "./definitions/TnsgetUserSpecificServiceByNameResponse";
import { TnsgetWebSafeUserByName } from "./definitions/TnsgetWebSafeUserByName";
import { TnsgetWebSafeUserByNameResponse } from "./definitions/TnsgetWebSafeUserByNameResponse";
import { TnsupdateDmOutputProfile } from "./definitions/TnsupdateDmOutputProfile";
import { TnsupdateDmOutputProfileResponse } from "./definitions/TnsupdateDmOutputProfileResponse";
import { TnsgetMonitoredServiceGroupEntriesByIds } from "./definitions/TnsgetMonitoredServiceGroupEntriesByIds";
import { TnsgetMonitoredServiceGroupEntriesByIdsResponse } from "./definitions/TnsgetMonitoredServiceGroupEntriesByIdsResponse";
import { TnsaddChargingApplicationEntries } from "./definitions/TnsaddChargingApplicationEntries";
import { TnsaddChargingApplicationEntriesResponse } from "./definitions/TnsaddChargingApplicationEntriesResponse";
import { TnsgetSmpAttributeTopic } from "./definitions/TnsgetSmpAttributeTopic";
import { TnsgetSmpAttributeTopicResponse } from "./definitions/TnsgetSmpAttributeTopicResponse";
import { TnsgetAllRedundantUnits } from "./definitions/TnsgetAllRedundantUnits";
import { TnsgetAllRedundantUnitsResponse } from "./definitions/TnsgetAllRedundantUnitsResponse";
import { TnsgetMonitoredServiceGroupEntries } from "./definitions/TnsgetMonitoredServiceGroupEntries";
import { TnsgetMonitoredServiceGroupEntriesResponse } from "./definitions/TnsgetMonitoredServiceGroupEntriesResponse";
import { TnsgetTopologyCollector } from "./definitions/TnsgetTopologyCollector";
import { TnsgetTopologyCollectorResponse } from "./definitions/TnsgetTopologyCollectorResponse";
import { TnsgetUserByName } from "./definitions/TnsgetUserByName";
import { TnsgetUserByNameResponse } from "./definitions/TnsgetUserByNameResponse";
import { TnsupdateServiceCatalogEntries } from "./definitions/TnsupdateServiceCatalogEntries";
import { TnsupdateServiceCatalogEntriesResponse } from "./definitions/TnsupdateServiceCatalogEntriesResponse";
import { TnsgetApplicationEntitiesByIds } from "./definitions/TnsgetApplicationEntitiesByIds";
import { TnsgetApplicationEntitiesByIdsResponse } from "./definitions/TnsgetApplicationEntitiesByIdsResponse";
import { TnsgetUserSpecificServiceIdByName } from "./definitions/TnsgetUserSpecificServiceIdByName";
import { TnsgetUserSpecificServiceIdByNameResponse } from "./definitions/TnsgetUserSpecificServiceIdByNameResponse";
import { TnsgetQoeRuleDefIdByName } from "./definitions/TnsgetQoeRuleDefIdByName";
import { TnsgetQoeRuleDefIdByNameResponse } from "./definitions/TnsgetQoeRuleDefIdByNameResponse";
import { TnsgetAutonomousSystemIdByName } from "./definitions/TnsgetAutonomousSystemIdByName";
import { TnsgetAutonomousSystemIdByNameResponse } from "./definitions/TnsgetAutonomousSystemIdByNameResponse";
import { TnsdeleteChargingPlanEntries } from "./definitions/TnsdeleteChargingPlanEntries";
import { TnsdeleteChargingPlanEntriesResponse } from "./definitions/TnsdeleteChargingPlanEntriesResponse";
import { TnsgetAutonomousSystemEntryByName } from "./definitions/TnsgetAutonomousSystemEntryByName";
import { TnsgetAutonomousSystemEntryByNameResponse } from "./definitions/TnsgetAutonomousSystemEntryByNameResponse";
import { TnsgetEventActionEntriesByIds } from "./definitions/TnsgetEventActionEntriesByIds";
import { TnsgetEventActionEntriesByIdsResponse } from "./definitions/TnsgetEventActionEntriesByIdsResponse";
import { TnsgetActionCatalogEntries } from "./definitions/TnsgetActionCatalogEntries";
import { TnsgetActionCatalogEntriesResponse } from "./definitions/TnsgetActionCatalogEntriesResponse";
import { TnsgetMdDeviceByName } from "./definitions/TnsgetMdDeviceByName";
import { TnsgetMdDeviceByNameResponse } from "./definitions/TnsgetMdDeviceByNameResponse";
import { TnsgetHostCatalogEntries } from "./definitions/TnsgetHostCatalogEntries";
import { TnsgetHostCatalogEntriesResponse } from "./definitions/TnsgetHostCatalogEntriesResponse";
import { TnsdeleteHostGroups } from "./definitions/TnsdeleteHostGroups";
import { TnsdeleteHostGroupsResponse } from "./definitions/TnsdeleteHostGroupsResponse";
import { TnsupdateEventActionCatalogEntries } from "./definitions/TnsupdateEventActionCatalogEntries";
import { TnsupdateEventActionCatalogEntriesResponse } from "./definitions/TnsupdateEventActionCatalogEntriesResponse";
import { TnsaddQuotaPlans } from "./definitions/TnsaddQuotaPlans";
import { TnsaddQuotaPlansResponse } from "./definitions/TnsaddQuotaPlansResponse";
import { TnsaddServicePlans } from "./definitions/TnsaddServicePlans";
import { TnsaddServicePlansResponse } from "./definitions/TnsaddServicePlansResponse";
import { TnsdeleteDevice } from "./definitions/TnsdeleteDevice";
import { TnsdeleteDeviceResponse } from "./definitions/TnsdeleteDeviceResponse";
import { TnsgetNppAccountByName } from "./definitions/TnsgetNppAccountByName";
import { TnsgetNppAccountByNameResponse } from "./definitions/TnsgetNppAccountByNameResponse";
import { TnsupdateQuotaCatalogEntries } from "./definitions/TnsupdateQuotaCatalogEntries";
import { TnsupdateQuotaCatalogEntriesResponse } from "./definitions/TnsupdateQuotaCatalogEntriesResponse";
import { TnsgetTubeGroupsByUser } from "./definitions/TnsgetTubeGroupsByUser";
import { TnsgetTubeGroupsByUserResponse } from "./definitions/TnsgetTubeGroupsByUserResponse";
import { TnsupdateServiceGroups } from "./definitions/TnsupdateServiceGroups";
import { TnsupdateServiceGroupsResponse } from "./definitions/TnsupdateServiceGroupsResponse";
import { TnsgetTubesByNames } from "./definitions/TnsgetTubesByNames";
import { TnsgetTubesByNamesResponse } from "./definitions/TnsgetTubesByNamesResponse";
import { TnsdeleteServicePlans } from "./definitions/TnsdeleteServicePlans";
import { TnsdeleteServicePlansResponse } from "./definitions/TnsdeleteServicePlansResponse";
import { TnsgetLicense } from "./definitions/TnsgetLicense";
import { TnsgetLicenseResponse } from "./definitions/TnsgetLicenseResponse";
import { TnsinsertQuotaEvent } from "./definitions/TnsinsertQuotaEvent";
import { TnsinsertQuotaEventResponse } from "./definitions/TnsinsertQuotaEventResponse";
import { TnsupdateIfcPortCatalogEntries } from "./definitions/TnsupdateIfcPortCatalogEntries";
import { TnsupdateIfcPortCatalogEntriesResponse } from "./definitions/TnsupdateIfcPortCatalogEntriesResponse";
import { TnsaddEventActionCatalogEntries } from "./definitions/TnsaddEventActionCatalogEntries";
import { TnsaddEventActionCatalogEntriesResponse } from "./definitions/TnsaddEventActionCatalogEntriesResponse";
import { TnsdeleteChargingApplicationEntries } from "./definitions/TnsdeleteChargingApplicationEntries";
import { TnsdeleteChargingApplicationEntriesResponse } from "./definitions/TnsdeleteChargingApplicationEntriesResponse";
import { Tnspoll } from "./definitions/Tnspoll";
import { TnspollResponse } from "./definitions/TnspollResponse";
import { TnsgetTubeByNames } from "./definitions/TnsgetTubeByNames";
import { TnsgetTubeByNamesResponse } from "./definitions/TnsgetTubeByNamesResponse";
import { TnssetDmProfileEscapeChar } from "./definitions/TnssetDmProfileEscapeChar";
import { TnssetDmProfileEscapeCharResponse } from "./definitions/TnssetDmProfileEscapeCharResponse";
import { TnsupdateDeviceTca } from "./definitions/TnsupdateDeviceTca";
import { TnsupdateDeviceTcaResponse } from "./definitions/TnsupdateDeviceTcaResponse";
import { TnsgetServicePlanIdByName } from "./definitions/TnsgetServicePlanIdByName";
import { TnsgetServicePlanIdByNameResponse } from "./definitions/TnsgetServicePlanIdByNameResponse";
import { TnsaddCocGroupCatalogEntries } from "./definitions/TnsaddCocGroupCatalogEntries";
import { TnsaddCocGroupCatalogEntriesResponse } from "./definitions/TnsaddCocGroupCatalogEntriesResponse";
import { TnsupdateSubnetMapFile } from "./definitions/TnsupdateSubnetMapFile";
import { TnsupdateSubnetMapFileResponse } from "./definitions/TnsupdateSubnetMapFileResponse";
import { TnsgetCocGroupIdByName } from "./definitions/TnsgetCocGroupIdByName";
import { TnsgetCocGroupIdByNameResponse } from "./definitions/TnsgetCocGroupIdByNameResponse";
import { TnsaddUser } from "./definitions/TnsaddUser";
import { TnsaddUserResponse } from "./definitions/TnsaddUserResponse";
import { TnsgetNmsReturnCode } from "./definitions/TnsgetNmsReturnCode";
import { TnsgetNmsReturnCodeResponse } from "./definitions/TnsgetNmsReturnCodeResponse";
import { TnsgetServicePlanAddOnEntries } from "./definitions/TnsgetServicePlanAddOnEntries";
import { TnsgetServicePlanAddOnEntriesResponse } from "./definitions/TnsgetServicePlanAddOnEntriesResponse";
import { TnsupdateCocGroupCatalogEntries } from "./definitions/TnsupdateCocGroupCatalogEntries";
import { TnsupdateCocGroupCatalogEntriesResponse } from "./definitions/TnsupdateCocGroupCatalogEntriesResponse";
import { TnsupdateHostCatalogEntries } from "./definitions/TnsupdateHostCatalogEntries";
import { TnsupdateHostCatalogEntriesResponse } from "./definitions/TnsupdateHostCatalogEntriesResponse";
import { TnscreateFullSetup } from "./definitions/TnscreateFullSetup";
import { TnscreateFullSetupResponse } from "./definitions/TnscreateFullSetupResponse";
import { TnsgetNxLicense } from "./definitions/TnsgetNxLicense";
import { TnsgetNxLicenseResponse } from "./definitions/TnsgetNxLicenseResponse";
import { TnsgetEnterpriseGeneralTopicDto } from "./definitions/TnsgetEnterpriseGeneralTopicDto";
import { TnsgetEnterpriseGeneralTopicDtoResponse } from "./definitions/TnsgetEnterpriseGeneralTopicDtoResponse";
import { TnsgetContentKeyLocalId } from "./definitions/TnsgetContentKeyLocalId";
import { TnsgetContentKeyLocalIdResponse } from "./definitions/TnsgetContentKeyLocalIdResponse";
import { TnssendGenericEvent } from "./definitions/TnssendGenericEvent";
import { TnssendGenericEventResponse } from "./definitions/TnssendGenericEventResponse";
import { TnssetNetAwarenessTopic } from "./definitions/TnssetNetAwarenessTopic";
import { TnssetNetAwarenessTopicResponse } from "./definitions/TnssetNetAwarenessTopicResponse";
import { TnsgetTubeGroupsByIds } from "./definitions/TnsgetTubeGroupsByIds";
import { TnsgetTubeGroupsByIdsResponse } from "./definitions/TnsgetTubeGroupsByIdsResponse";
import { TnsgetGroupByName } from "./definitions/TnsgetGroupByName";
import { TnsgetGroupByNameResponse } from "./definitions/TnsgetGroupByNameResponse";
import { TnscheckRedundantUnits } from "./definitions/TnscheckRedundantUnits";
import { TnscheckRedundantUnitsResponse } from "./definitions/TnscheckRedundantUnitsResponse";
import { TnsupdateIfcGroupCatalogEntries } from "./definitions/TnsupdateIfcGroupCatalogEntries";
import { TnsupdateIfcGroupCatalogEntriesResponse } from "./definitions/TnsupdateIfcGroupCatalogEntriesResponse";
import { TnsgetServiceCatalogEntries } from "./definitions/TnsgetServiceCatalogEntries";
import { TnsgetServiceCatalogEntriesResponse } from "./definitions/TnsgetServiceCatalogEntriesResponse";
import { TnsgetNetAwarenessTopic } from "./definitions/TnsgetNetAwarenessTopic";
import { TnsgetNetAwarenessTopicResponse } from "./definitions/TnsgetNetAwarenessTopicResponse";
import { TnsisNxFeatureEnabled } from "./definitions/TnsisNxFeatureEnabled";
import { TnsisNxFeatureEnabledResponse } from "./definitions/TnsisNxFeatureEnabledResponse";
import { TnsupdateGreCatalogEntries } from "./definitions/TnsupdateGreCatalogEntries";
import { TnsupdateGreCatalogEntriesResponse } from "./definitions/TnsupdateGreCatalogEntriesResponse";
import { TnsgetDeviceById } from "./definitions/TnsgetDeviceById";
import { TnsgetDeviceByIdResponse } from "./definitions/TnsgetDeviceByIdResponse";
import { TnsgetRoutingMapIdByNameFromDefaultNetworkDomain } from "./definitions/TnsgetRoutingMapIdByNameFromDefaultNetworkDomain";
import { TnsgetRoutingMapIdByNameFromDefaultNetworkDomainResponse } from "./definitions/TnsgetRoutingMapIdByNameFromDefaultNetworkDomainResponse";
import { TnsgetServiceCatLocalIdByName } from "./definitions/TnsgetServiceCatLocalIdByName";
import { TnsgetServiceCatLocalIdByNameResponse } from "./definitions/TnsgetServiceCatLocalIdByNameResponse";
import { TnsaddDevice } from "./definitions/TnsaddDevice";
import { TnsaddDeviceResponse } from "./definitions/TnsaddDeviceResponse";
import { TnsgetPolicyDistributionGroupByName } from "./definitions/TnsgetPolicyDistributionGroupByName";
import { TnsgetPolicyDistributionGroupByNameResponse } from "./definitions/TnsgetPolicyDistributionGroupByNameResponse";
import { TnsaddMonitoredServiceGroupEntries } from "./definitions/TnsaddMonitoredServiceGroupEntries";
import { TnsaddMonitoredServiceGroupEntriesResponse } from "./definitions/TnsaddMonitoredServiceGroupEntriesResponse";
import { TnsgetQuotaEvents } from "./definitions/TnsgetQuotaEvents";
import { TnsgetQuotaEventsResponse } from "./definitions/TnsgetQuotaEventsResponse";
import { TnssetEnterpriseExternalServerTopicDto } from "./definitions/TnssetEnterpriseExternalServerTopicDto";
import { TnssetEnterpriseExternalServerTopicDtoResponse } from "./definitions/TnssetEnterpriseExternalServerTopicDtoResponse";
import { TnsaddHostGroups } from "./definitions/TnsaddHostGroups";
import { TnsaddHostGroupsResponse } from "./definitions/TnsaddHostGroupsResponse";
import { TnsgetServicePlanByName } from "./definitions/TnsgetServicePlanByName";
import { TnsgetServicePlanByNameResponse } from "./definitions/TnsgetServicePlanByNameResponse";
import { TnsgetIfcGroupIdByName } from "./definitions/TnsgetIfcGroupIdByName";
import { TnsgetIfcGroupIdByNameResponse } from "./definitions/TnsgetIfcGroupIdByNameResponse";
import { TnsaddDosCatalogEntries } from "./definitions/TnsaddDosCatalogEntries";
import { TnsaddDosCatalogEntriesResponse } from "./definitions/TnsaddDosCatalogEntriesResponse";
import { TnsdeleteBiHaGroup } from "./definitions/TnsdeleteBiHaGroup";
import { TnsdeleteBiHaGroupResponse } from "./definitions/TnsdeleteBiHaGroupResponse";
import { TnsaddApplicationEntities } from "./definitions/TnsaddApplicationEntities";
import { TnsaddApplicationEntitiesResponse } from "./definitions/TnsaddApplicationEntitiesResponse";
import { TnsgetAsymGroups } from "./definitions/TnsgetAsymGroups";
import { TnsgetAsymGroupsResponse } from "./definitions/TnsgetAsymGroupsResponse";
import { TnsgetChargingApp2ServiceEntities } from "./definitions/TnsgetChargingApp2ServiceEntities";
import { TnsgetChargingApp2ServiceEntitiesResponse } from "./definitions/TnsgetChargingApp2ServiceEntitiesResponse";
import { TnsgetTubeDto } from "./definitions/TnsgetTubeDto";
import { TnsgetTubeDtoResponse } from "./definitions/TnsgetTubeDtoResponse";
import { TnsaddWorkServer } from "./definitions/TnsaddWorkServer";
import { TnsaddWorkServerResponse } from "./definitions/TnsaddWorkServerResponse";
import { TnsgetGreGroupCatalogEntries } from "./definitions/TnsgetGreGroupCatalogEntries";
import { TnsgetGreGroupCatalogEntriesResponse } from "./definitions/TnsgetGreGroupCatalogEntriesResponse";
import { TnsaddSmpGroup } from "./definitions/TnsaddSmpGroup";
import { TnsaddSmpGroupResponse } from "./definitions/TnsaddSmpGroupResponse";
import { TnsdeleteChargingRule } from "./definitions/TnsdeleteChargingRule";
import { TnsdeleteChargingRuleResponse } from "./definitions/TnsdeleteChargingRuleResponse";
import { TnsgetTimeEntriesByIds } from "./definitions/TnsgetTimeEntriesByIds";
import { TnsgetTimeEntriesByIdsResponse } from "./definitions/TnsgetTimeEntriesByIdsResponse";
import { TnsgetDosEntriesByIds } from "./definitions/TnsgetDosEntriesByIds";
import { TnsgetDosEntriesByIdsResponse } from "./definitions/TnsgetDosEntriesByIdsResponse";
import { TnsupdateWuDevice } from "./definitions/TnsupdateWuDevice";
import { TnsupdateWuDeviceResponse } from "./definitions/TnsupdateWuDeviceResponse";
import { TnsdeleteMonitoredServiceGroupEntries } from "./definitions/TnsdeleteMonitoredServiceGroupEntries";
import { TnsdeleteMonitoredServiceGroupEntriesResponse } from "./definitions/TnsdeleteMonitoredServiceGroupEntriesResponse";
import { TnsgetVlanGroupCatalogEntries } from "./definitions/TnsgetVlanGroupCatalogEntries";
import { TnsgetVlanGroupCatalogEntriesResponse } from "./definitions/TnsgetVlanGroupCatalogEntriesResponse";
import { TnsaddClientDeviceGroupEntries } from "./definitions/TnsaddClientDeviceGroupEntries";
import { TnsaddClientDeviceGroupEntriesResponse } from "./definitions/TnsaddClientDeviceGroupEntriesResponse";
import { TnsupdateHheCatalogEntries } from "./definitions/TnsupdateHheCatalogEntries";
import { TnsupdateHheCatalogEntriesResponse } from "./definitions/TnsupdateHheCatalogEntriesResponse";
import { TnsaddCocCatalogEntries } from "./definitions/TnsaddCocCatalogEntries";
import { TnsaddCocCatalogEntriesResponse } from "./definitions/TnsaddCocCatalogEntriesResponse";
import { TnsgetPipes } from "./definitions/TnsgetPipes";
import { TnsgetPipesResponse } from "./definitions/TnsgetPipesResponse";
import { TnsrevertMonitoredServiceMembersToDefault } from "./definitions/TnsrevertMonitoredServiceMembersToDefault";
import { TnsrevertMonitoredServiceMembersToDefaultResponse } from "./definitions/TnsrevertMonitoredServiceMembersToDefaultResponse";
import { TnsexportPolicy1 } from "./definitions/TnsexportPolicy1";
import { TnsexportPolicy1Response } from "./definitions/TnsexportPolicy1Response";
import { TnssetEnterpriseCsTopicDto } from "./definitions/TnssetEnterpriseCsTopicDto";
import { TnssetEnterpriseCsTopicDtoResponse } from "./definitions/TnssetEnterpriseCsTopicDtoResponse";
import { TnsgetIfcGroupEntriesByIds } from "./definitions/TnsgetIfcGroupEntriesByIds";
import { TnsgetIfcGroupEntriesByIdsResponse } from "./definitions/TnsgetIfcGroupEntriesByIdsResponse";
import { TnsaddMdDevice } from "./definitions/TnsaddMdDevice";
import { TnsaddMdDeviceResponse } from "./definitions/TnsaddMdDeviceResponse";
import { TnsgetChargingApplicationEntries } from "./definitions/TnsgetChargingApplicationEntries";
import { TnsgetChargingApplicationEntriesResponse } from "./definitions/TnsgetChargingApplicationEntriesResponse";
import { TnsgetControlPlaneIdentifierNames } from "./definitions/TnsgetControlPlaneIdentifierNames";
import { TnsgetControlPlaneIdentifierNamesResponse } from "./definitions/TnsgetControlPlaneIdentifierNamesResponse";
import { TnsdeleteQuotaCatalogEntries } from "./definitions/TnsdeleteQuotaCatalogEntries";
import { TnsdeleteQuotaCatalogEntriesResponse } from "./definitions/TnsdeleteQuotaCatalogEntriesResponse";
import { TnsgetTimeCatalogEntries } from "./definitions/TnsgetTimeCatalogEntries";
import { TnsgetTimeCatalogEntriesResponse } from "./definitions/TnsgetTimeCatalogEntriesResponse";
import { TnssetEnterpriseSnmpTopicDto } from "./definitions/TnssetEnterpriseSnmpTopicDto";
import { TnssetEnterpriseSnmpTopicDtoResponse } from "./definitions/TnssetEnterpriseSnmpTopicDtoResponse";
import { TnsgetAllTopologyCollectors } from "./definitions/TnsgetAllTopologyCollectors";
import { TnsgetAllTopologyCollectorsResponse } from "./definitions/TnsgetAllTopologyCollectorsResponse";
import { TnsgetDmFieldExtension } from "./definitions/TnsgetDmFieldExtension";
import { TnsgetDmFieldExtensionResponse } from "./definitions/TnsgetDmFieldExtensionResponse";
import { TnsdeleteCocCatalogEntries } from "./definitions/TnsdeleteCocCatalogEntries";
import { TnsdeleteCocCatalogEntriesResponse } from "./definitions/TnsdeleteCocCatalogEntriesResponse";
import { TnsgetServiceIdByName } from "./definitions/TnsgetServiceIdByName";
import { TnsgetServiceIdByNameResponse } from "./definitions/TnsgetServiceIdByNameResponse";
import { TnsgetVlanIdByName } from "./definitions/TnsgetVlanIdByName";
import { TnsgetVlanIdByNameResponse } from "./definitions/TnsgetVlanIdByNameResponse";
import { TnsupdateUser } from "./definitions/TnsupdateUser";
import { TnsupdateUserResponse } from "./definitions/TnsupdateUserResponse";
import { TnsaddNetworkDomains } from "./definitions/TnsaddNetworkDomains";
import { TnsaddNetworkDomainsResponse } from "./definitions/TnsaddNetworkDomainsResponse";
import { TnsgetAlertCounterEntriesByOIds } from "./definitions/TnsgetAlertCounterEntriesByOIds";
import { TnsgetAlertCounterEntriesByOIdsResponse } from "./definitions/TnsgetAlertCounterEntriesByOIdsResponse";
import { TnsgetHheEntriesByIds } from "./definitions/TnsgetHheEntriesByIds";
import { TnsgetHheEntriesByIdsResponse } from "./definitions/TnsgetHheEntriesByIdsResponse";
import { TnsgetGreCatalogEntries } from "./definitions/TnsgetGreCatalogEntries";
import { TnsgetGreCatalogEntriesResponse } from "./definitions/TnsgetGreCatalogEntriesResponse";
import { TnsgetQuotaRules } from "./definitions/TnsgetQuotaRules";
import { TnsgetQuotaRulesResponse } from "./definitions/TnsgetQuotaRulesResponse";
import { TnsgetHostGroups } from "./definitions/TnsgetHostGroups";
import { TnsgetHostGroupsResponse } from "./definitions/TnsgetHostGroupsResponse";
import { TnsaddSmpRadiusTargets } from "./definitions/TnsaddSmpRadiusTargets";
import { TnsaddSmpRadiusTargetsResponse } from "./definitions/TnsaddSmpRadiusTargetsResponse";
import { TnsupdateChargingApplicationEntries } from "./definitions/TnsupdateChargingApplicationEntries";
import { TnsupdateChargingApplicationEntriesResponse } from "./definitions/TnsupdateChargingApplicationEntriesResponse";
import { TnsdeleteTimeCatalogEntries } from "./definitions/TnsdeleteTimeCatalogEntries";
import { TnsdeleteTimeCatalogEntriesResponse } from "./definitions/TnsdeleteTimeCatalogEntriesResponse";
import { TnsgetInputFilteringRuleListFromXml } from "./definitions/TnsgetInputFilteringRuleListFromXml";
import { TnsgetInputFilteringRuleListFromXmlResponse } from "./definitions/TnsgetInputFilteringRuleListFromXmlResponse";
import { TnsaddServicePlanAddOnEntries } from "./definitions/TnsaddServicePlanAddOnEntries";
import { TnsaddServicePlanAddOnEntriesResponse } from "./definitions/TnsaddServicePlanAddOnEntriesResponse";
import { TnsgetVsEntriesByIds } from "./definitions/TnsgetVsEntriesByIds";
import { TnsgetVsEntriesByIdsResponse } from "./definitions/TnsgetVsEntriesByIdsResponse";
import { TnsresolveCatalogNames } from "./definitions/TnsresolveCatalogNames";
import { TnsresolveCatalogNamesResponse } from "./definitions/TnsresolveCatalogNamesResponse";
import { TnsgetAlertCatalogEntries } from "./definitions/TnsgetAlertCatalogEntries";
import { TnsgetAlertCatalogEntriesResponse } from "./definitions/TnsgetAlertCatalogEntriesResponse";
import { TnsupdateHostGroups } from "./definitions/TnsupdateHostGroups";
import { TnsupdateHostGroupsResponse } from "./definitions/TnsupdateHostGroupsResponse";
import { TnsupdateDeployedFacebookRevision } from "./definitions/TnsupdateDeployedFacebookRevision";
import { TnsupdateDeployedFacebookRevisionResponse } from "./definitions/TnsupdateDeployedFacebookRevisionResponse";
import { TnsaddCountryClassification } from "./definitions/TnsaddCountryClassification";
import { TnsaddCountryClassificationResponse } from "./definitions/TnsaddCountryClassificationResponse";
import { TnsgetCocEntriesByIds } from "./definitions/TnsgetCocEntriesByIds";
import { TnsgetCocEntriesByIdsResponse } from "./definitions/TnsgetCocEntriesByIdsResponse";
import { TnsaddHostCatalogEntries } from "./definitions/TnsaddHostCatalogEntries";
import { TnsaddHostCatalogEntriesResponse } from "./definitions/TnsaddHostCatalogEntriesResponse";
import { TnsgetEnterpriseExternalServerTopicDto } from "./definitions/TnsgetEnterpriseExternalServerTopicDto";
import { TnsgetEnterpriseExternalServerTopicDtoResponse } from "./definitions/TnsgetEnterpriseExternalServerTopicDtoResponse";
import { TnssendAsGeoBackupEvent } from "./definitions/TnssendAsGeoBackupEvent";
import { TnssendAsGeoBackupEventResponse } from "./definitions/TnssendAsGeoBackupEventResponse";
import { TnsdeleteAutonomousSystemEntries } from "./definitions/TnsdeleteAutonomousSystemEntries";
import { TnsdeleteAutonomousSystemEntriesResponse } from "./definitions/TnsdeleteAutonomousSystemEntriesResponse";
import { TnsupdateDmOutputRecord } from "./definitions/TnsupdateDmOutputRecord";
import { TnsupdateDmOutputRecordResponse } from "./definitions/TnsupdateDmOutputRecordResponse";
import { TnsupdateServicePlans } from "./definitions/TnsupdateServicePlans";
import { TnsupdateServicePlansResponse } from "./definitions/TnsupdateServicePlansResponse";
import { TnsdeleteWorkServer } from "./definitions/TnsdeleteWorkServer";
import { TnsdeleteWorkServerResponse } from "./definitions/TnsdeleteWorkServerResponse";
import { TnsgetPolicy } from "./definitions/TnsgetPolicy";
import { TnsgetPolicyResponse } from "./definitions/TnsgetPolicyResponse";
import { TnsgetEnterpriseAddedServicesTopicDto } from "./definitions/TnsgetEnterpriseAddedServicesTopicDto";
import { TnsgetEnterpriseAddedServicesTopicDtoResponse } from "./definitions/TnsgetEnterpriseAddedServicesTopicDtoResponse";
import { TnsgetServicePlansByIds } from "./definitions/TnsgetServicePlansByIds";
import { TnsgetServicePlansByIdsResponse } from "./definitions/TnsgetServicePlansByIdsResponse";
import { TnsgetPorts } from "./definitions/TnsgetPorts";
import { TnsgetPortsResponse } from "./definitions/TnsgetPortsResponse";
import { TnsdeleteVlanGroupCatalogEntries } from "./definitions/TnsdeleteVlanGroupCatalogEntries";
import { TnsdeleteVlanGroupCatalogEntriesResponse } from "./definitions/TnsdeleteVlanGroupCatalogEntriesResponse";
import { TnsrevertServiceEntryToDefault } from "./definitions/TnsrevertServiceEntryToDefault";
import { TnsrevertServiceEntryToDefaultResponse } from "./definitions/TnsrevertServiceEntryToDefaultResponse";
import { TnsgetServicePlans } from "./definitions/TnsgetServicePlans";
import { TnsgetServicePlansResponse } from "./definitions/TnsgetServicePlansResponse";
import { TnsgetGreEntriesByIds } from "./definitions/TnsgetGreEntriesByIds";
import { TnsgetGreEntriesByIdsResponse } from "./definitions/TnsgetGreEntriesByIdsResponse";
import { TnsgetVlanGroupEntriesByIds } from "./definitions/TnsgetVlanGroupEntriesByIds";
import { TnsgetVlanGroupEntriesByIdsResponse } from "./definitions/TnsgetVlanGroupEntriesByIdsResponse";
import { TnsmodifyTopologyCollector } from "./definitions/TnsmodifyTopologyCollector";
import { TnsmodifyTopologyCollectorResponse } from "./definitions/TnsmodifyTopologyCollectorResponse";
import { TnsgetAllDmOutputProfileEntities } from "./definitions/TnsgetAllDmOutputProfileEntities";
import { TnsgetAllDmOutputProfileEntitiesResponse } from "./definitions/TnsgetAllDmOutputProfileEntitiesResponse";
import { TnsupdateAllChargingRuleForCost } from "./definitions/TnsupdateAllChargingRuleForCost";
import { TnsupdateAllChargingRuleForCostResponse } from "./definitions/TnsupdateAllChargingRuleForCostResponse";
import { TnsaddWebSafeUser } from "./definitions/TnsaddWebSafeUser";
import { TnsaddWebSafeUserResponse } from "./definitions/TnsaddWebSafeUserResponse";
import { TnsgetIfcPortIdByName } from "./definitions/TnsgetIfcPortIdByName";
import { TnsgetIfcPortIdByNameResponse } from "./definitions/TnsgetIfcPortIdByNameResponse";
import { TnsgetAllAutonomousSystemEntries } from "./definitions/TnsgetAllAutonomousSystemEntries";
import { TnsgetAllAutonomousSystemEntriesResponse } from "./definitions/TnsgetAllAutonomousSystemEntriesResponse";
import { TnsgetDeviceTcAs } from "./definitions/TnsgetDeviceTcAs";
import { TnsgetDeviceTcAsResponse } from "./definitions/TnsgetDeviceTcAsResponse";
import { TnsmodifySnmpV3UserData } from "./definitions/TnsmodifySnmpV3UserData";
import { TnsmodifySnmpV3UserDataResponse } from "./definitions/TnsmodifySnmpV3UserDataResponse";
import { TnsgetVlanEntriesByIds } from "./definitions/TnsgetVlanEntriesByIds";
import { TnsgetVlanEntriesByIdsResponse } from "./definitions/TnsgetVlanEntriesByIdsResponse";
import { TnsgetAllWorkServer } from "./definitions/TnsgetAllWorkServer";
import { TnsgetAllWorkServerResponse } from "./definitions/TnsgetAllWorkServerResponse";
import { TnsaddSubscribers } from "./definitions/TnsaddSubscribers";
import { TnsaddSubscribersResponse } from "./definitions/TnsaddSubscribersResponse";
import { TnsdeleteDosCatalogEntries } from "./definitions/TnsdeleteDosCatalogEntries";
import { TnsdeleteDosCatalogEntriesResponse } from "./definitions/TnsdeleteDosCatalogEntriesResponse";
import { TnsgetServiceEntriesByIds } from "./definitions/TnsgetServiceEntriesByIds";
import { TnsgetServiceEntriesByIdsResponse } from "./definitions/TnsgetServiceEntriesByIdsResponse";
import { TnssetSyslogConnections } from "./definitions/TnssetSyslogConnections";
import { TnssetSyslogConnectionsResponse } from "./definitions/TnssetSyslogConnectionsResponse";
import { TnsgetServicesByNames } from "./definitions/TnsgetServicesByNames";
import { TnsgetServicesByNamesResponse } from "./definitions/TnsgetServicesByNamesResponse";
import { TnsupdateMonitoredServiceGroupEntries } from "./definitions/TnsupdateMonitoredServiceGroupEntries";
import { TnsupdateMonitoredServiceGroupEntriesResponse } from "./definitions/TnsupdateMonitoredServiceGroupEntriesResponse";
import { TnsgetChargingApp2ServiceEntitiesByName } from "./definitions/TnsgetChargingApp2ServiceEntitiesByName";
import { TnsgetChargingApp2ServiceEntitiesByNameResponse } from "./definitions/TnsgetChargingApp2ServiceEntitiesByNameResponse";
import { TnsaddGreCatalogEntries } from "./definitions/TnsaddGreCatalogEntries";
import { TnsaddGreCatalogEntriesResponse } from "./definitions/TnsaddGreCatalogEntriesResponse";
import { TnsgetCmtsIdByName } from "./definitions/TnsgetCmtsIdByName";
import { TnsgetCmtsIdByNameResponse } from "./definitions/TnsgetCmtsIdByNameResponse";
import { TnssetSyslogEnabled } from "./definitions/TnssetSyslogEnabled";
import { TnssetSyslogEnabledResponse } from "./definitions/TnssetSyslogEnabledResponse";
import { TnsassignSmpRouterToSmpGroup } from "./definitions/TnsassignSmpRouterToSmpGroup";
import { TnsassignSmpRouterToSmpGroupResponse } from "./definitions/TnsassignSmpRouterToSmpGroupResponse";
import { TnssetEnterpriseServersTopicDto } from "./definitions/TnssetEnterpriseServersTopicDto";
import { TnssetEnterpriseServersTopicDtoResponse } from "./definitions/TnssetEnterpriseServersTopicDtoResponse";
import { TnsgetDosIdByName } from "./definitions/TnsgetDosIdByName";
import { TnsgetDosIdByNameResponse } from "./definitions/TnsgetDosIdByNameResponse";
import { TnsaddQuotaRules } from "./definitions/TnsaddQuotaRules";
import { TnsaddQuotaRulesResponse } from "./definitions/TnsaddQuotaRulesResponse";
import { TnsupdateChargingRule } from "./definitions/TnsupdateChargingRule";
import { TnsupdateChargingRuleResponse } from "./definitions/TnsupdateChargingRuleResponse";
import { TnsdeleteClientDeviceGroupEntries } from "./definitions/TnsdeleteClientDeviceGroupEntries";
import { TnsdeleteClientDeviceGroupEntriesResponse } from "./definitions/TnsdeleteClientDeviceGroupEntriesResponse";
import { TnsgetTimeIdByName } from "./definitions/TnsgetTimeIdByName";
import { TnsgetTimeIdByNameResponse } from "./definitions/TnsgetTimeIdByNameResponse";
import { TnsupdateChargingPlanEntries } from "./definitions/TnsupdateChargingPlanEntries";
import { TnsupdateChargingPlanEntriesResponse } from "./definitions/TnsupdateChargingPlanEntriesResponse";
import { TnsgetIfcPortEntriesByIds } from "./definitions/TnsgetIfcPortEntriesByIds";
import { TnsgetIfcPortEntriesByIdsResponse } from "./definitions/TnsgetIfcPortEntriesByIdsResponse";
import { TnsgetDmInputFilteringRileListXml } from "./definitions/TnsgetDmInputFilteringRileListXml";
import { TnsgetDmInputFilteringRileListXmlResponse } from "./definitions/TnsgetDmInputFilteringRileListXmlResponse";
import { TnsaddChargingPlanEntries } from "./definitions/TnsaddChargingPlanEntries";
import { TnsaddChargingPlanEntriesResponse } from "./definitions/TnsaddChargingPlanEntriesResponse";
import { TnsexportDefaultPolicy } from "./definitions/TnsexportDefaultPolicy";
import { TnsexportDefaultPolicyResponse } from "./definitions/TnsexportDefaultPolicyResponse";
import { TnsdeleteServiceGroups } from "./definitions/TnsdeleteServiceGroups";
import { TnsdeleteServiceGroupsResponse } from "./definitions/TnsdeleteServiceGroupsResponse";
import { TnsgetFullTubeDto } from "./definitions/TnsgetFullTubeDto";
import { TnsgetFullTubeDtoResponse } from "./definitions/TnsgetFullTubeDtoResponse";
import { TnsgetVsCatalogEntries } from "./definitions/TnsgetVsCatalogEntries";
import { TnsgetVsCatalogEntriesResponse } from "./definitions/TnsgetVsCatalogEntriesResponse";
import { WsNxServices } from "./services/WsNxServices";

export interface AllotClient extends SoapClient {
    WsNxServices: WsNxServices;
    getAllCollectorsAsync(getAllCollectors: TnsgetAllCollectors): Promise<[result: TnsgetAllCollectorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    importDeviceAsync(importDevice: TnsimportDevice): Promise<[result: TnsimportDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceGroupsByIdsAsync(getServiceGroupsByIds: TnsgetServiceGroupsByIds): Promise<[result: TnsgetServiceGroupsByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteVsCatalogEntriesAsync(deleteVsCatalogEntries: TnsdeleteVsCatalogEntries): Promise<[result: TnsdeleteVsCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDosCatalogEntriesAsync(getDosCatalogEntries: TnsgetDosCatalogEntries): Promise<[result: TnsgetDosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getNextAsymGroupIdAsync(getNextAsymGroupId: TnsgetNextAsymGroupId): Promise<[result: TnsgetNextAsymGroupIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVsIdByNameAsync(getVsIdByName: TnsgetVsIdByName): Promise<[result: TnsgetVsIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteUserAsync(deleteUser: TnsdeleteUser): Promise<[result: TnsdeleteUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addIfcPortCatalogEntriesAsync(addIfcPortCatalogEntries: TnsaddIfcPortCatalogEntries): Promise<[result: TnsaddIfcPortCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getClientDeviceGroupEntriesAsync(getClientDeviceGroupEntries: TnsgetClientDeviceGroupEntries): Promise<[result: TnsgetClientDeviceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    revertAllServiceGroupsToDefaultAsync(revertAllServiceGroupsToDefault: TnsrevertAllServiceGroupsToDefault): Promise<[result: TnsrevertAllServiceGroupsToDefaultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    saveWhiteListAsync(saveWhiteList: TnssaveWhiteList): Promise<[result: TnssaveWhiteListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    installUpdatesFromLocalDiskAsync(installUpdatesFromLocalDisk: TnsinstallUpdatesFromLocalDisk): Promise<[result: TnsinstallUpdatesFromLocalDiskResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllChargingConditions2SPByPolicyAsync(getAllChargingConditions2SpByPolicy: TnsgetAllChargingConditions2SpByPolicy): Promise<[result: TnsgetAllChargingConditions2SpByPolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAlertEntriesByIdsAsync(getAlertEntriesByIds: TnsgetAlertEntriesByIds): Promise<[result: TnsgetAlertEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateClientDeviceGroupEntriesAsync(updateClientDeviceGroupEntries: TnsupdateClientDeviceGroupEntries): Promise<[result: TnsupdateClientDeviceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDMOutputRecordByNameAsync(getDmOutputRecordByName: TnsgetDmOutputRecordByName): Promise<[result: TnsgetDmOutputRecordByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceGroupIdByNameAsync(getServiceGroupIdByName: TnsgetServiceGroupIdByName): Promise<[result: TnsgetServiceGroupIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteGreCatalogEntriesAsync(deleteGreCatalogEntries: TnsdeleteGreCatalogEntries): Promise<[result: TnsdeleteGreCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getClientDeviceGroupIdByNameAsync(getClientDeviceGroupIdByName: TnsgetClientDeviceGroupIdByName): Promise<[result: TnsgetClientDeviceGroupIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getContentValueIDAsync(getContentValueId: TnsgetContentValueId): Promise<[result: TnsgetContentValueIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDmInputFilteringRuleEntityAsync(getDmInputFilteringRuleEntity: TnsgetDmInputFilteringRuleEntity): Promise<[result: TnsgetDmInputFilteringRuleEntityResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteTubeGroupsAsync(deleteTubeGroups: TnsdeleteTubeGroups): Promise<[result: TnsdeleteTubeGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    removeAndSetDeviceConfigurationAsync(removeAndSetDeviceConfiguration: TnsremoveAndSetDeviceConfiguration): Promise<[result: TnsremoveAndSetDeviceConfigurationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateTubesQosAsync(updateTubesQos: TnsupdateTubesQos): Promise<[result: TnsupdateTubesQosResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getUsersAsync(getUsers: TnsgetUsers): Promise<[result: TnsgetUsersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSmpTopicAsync(getSmpTopic: TnsgetSmpTopic): Promise<[result: TnsgetSmpTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getWebSafeAuthenticatedUserAsync(getWebSafeAuthenticatedUser: TnsgetWebSafeAuthenticatedUser): Promise<[result: TnsgetWebSafeAuthenticatedUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateSubscriberIdFromSmfAsync(updateSubscriberIdFromSmf: TnsupdateSubscriberIdFromSmf): Promise<[result: TnsupdateSubscriberIdFromSmfResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDmEncryptionKeyAsync(getDmEncryptionKey: TnsgetDmEncryptionKey): Promise<[result: TnsgetDmEncryptionKeyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getClientDeviceEntriesByIdsAsync(getClientDeviceEntriesByIds: TnsgetClientDeviceEntriesByIds): Promise<[result: TnsgetClientDeviceEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGreGroupEntriesByIdsAsync(getGreGroupEntriesByIds: TnsgetGreGroupEntriesByIds): Promise<[result: TnsgetGreGroupEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    revertAllMonitoredServiceGroupToDefaultAsync(revertAllMonitoredServiceGroupToDefault: TnsrevertAllMonitoredServiceGroupToDefault): Promise<[result: TnsrevertAllMonitoredServiceGroupToDefaultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getWhiteListAsync(getWhiteList: TnsgetWhiteList): Promise<[result: TnsgetWhiteListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getRedirectInterfacesByDeviceIdAsync(getRedirectInterfacesByDeviceId: TnsgetRedirectInterfacesByDeviceId): Promise<[result: TnsgetRedirectInterfacesByDeviceIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateWebSafeUserAsync(updateWebSafeUser: TnsupdateWebSafeUser): Promise<[result: TnsupdateWebSafeUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setSmpTopicAsync(setSmpTopic: TnssetSmpTopic): Promise<[result: TnssetSmpTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSyslogEnabledAsync(getSyslogEnabled: TnsgetSyslogEnabled): Promise<[result: TnsgetSyslogEnabledResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQuotaEntriesByIdsAsync(getQuotaEntriesByIds: TnsgetQuotaEntriesByIds): Promise<[result: TnsgetQuotaEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteApplicationEntitiesAsync(deleteApplicationEntities: TnsdeleteApplicationEntities): Promise<[result: TnsdeleteApplicationEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDeviceCOCTopicAsync(getDeviceCocTopic: TnsgetDeviceCocTopic): Promise<[result: TnsgetDeviceCocTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQuotaPlansByIdsAsync(getQuotaPlansByIds: TnsgetQuotaPlansByIds): Promise<[result: TnsgetQuotaPlansByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteNetworkDomainsAsync(deleteNetworkDomains: TnsdeleteNetworkDomains): Promise<[result: TnsdeleteNetworkDomainsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteGroupsAsync(deleteGroups: TnsdeleteGroups): Promise<[result: TnsdeleteGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteQoeRuleDefCatalogEntriesAsync(deleteQoeRuleDefCatalogEntries: TnsdeleteQoeRuleDefCatalogEntries): Promise<[result: TnsdeleteQoeRuleDefCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getByNameAsync(getByName: TnsgetByName): Promise<[result: TnsgetByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingPlan2AppEntitiesAsync(getChargingPlan2AppEntities: TnsgetChargingPlan2AppEntities): Promise<[result: TnsgetChargingPlan2AppEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingApplicationEntityByNameAsync(getChargingApplicationEntityByName: TnsgetChargingApplicationEntityByName): Promise<[result: TnsgetChargingApplicationEntityByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSmpRadiusTargetsAsync(getSmpRadiusTargets: TnsgetSmpRadiusTargets): Promise<[result: TnsgetSmpRadiusTargetsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setDataExportConfigAsync(setDataExportConfig: TnssetDataExportConfig): Promise<[result: TnssetDataExportConfigResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCocCatalogEntriesAsync(getCocCatalogEntries: TnsgetCocCatalogEntries): Promise<[result: TnsgetCocCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostGroupIdByNameAsync(getHostGroupIdByName: TnsgetHostGroupIdByName): Promise<[result: TnsgetHostGroupIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addSubscriberIdAsync(addSubscriberId: TnsaddSubscriberId): Promise<[result: TnsaddSubscriberIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteVlanCatalogEntriesAsync(deleteVlanCatalogEntries: TnsdeleteVlanCatalogEntries): Promise<[result: TnsdeleteVlanCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getClientDeviceEntriesAsync(getClientDeviceEntries: TnsgetClientDeviceEntries): Promise<[result: TnsgetClientDeviceEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSubscriberInstancesAsync(getSubscriberInstances: TnsgetSubscriberInstances): Promise<[result: TnsgetSubscriberInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCmtasReportStatusAsync(getCmtasReportStatus: TnsgetCmtasReportStatus): Promise<[result: TnsgetCmtasReportStatusResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getWebSafeUsersAsync(getWebSafeUsers: TnsgetWebSafeUsers): Promise<[result: TnsgetWebSafeUsersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVcsAsync(getVcs: TnsgetVcs): Promise<[result: TnsgetVcsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setEnterpriseAddedServicesTopicDTOAsync(setEnterpriseAddedServicesTopicDto: TnssetEnterpriseAddedServicesTopicDto): Promise<[result: TnssetEnterpriseAddedServicesTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getRedundantUnitByDeviceAsync(getRedundantUnitByDevice: TnsgetRedundantUnitByDevice): Promise<[result: TnsgetRedundantUnitByDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addServiceGroupsAsync(addServiceGroups: TnsaddServiceGroups): Promise<[result: TnsaddServiceGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateAlertCatalogEntriesAsync(updateAlertCatalogEntries: TnsupdateAlertCatalogEntries): Promise<[result: TnsupdateAlertCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getPolicyDistributionGroupsAsync(getPolicyDistributionGroups: TnsgetPolicyDistributionGroups): Promise<[result: TnsgetPolicyDistributionGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDmOutputProfileByTypeAndNameAsync(getDmOutputProfileByTypeAndName: TnsgetDmOutputProfileByTypeAndName): Promise<[result: TnsgetDmOutputProfileByTypeAndNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getBlackListCategoriesAsync(getBlackListCategories: TnsgetBlackListCategories): Promise<[result: TnsgetBlackListCategoriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateNetworkDomainsAsync(updateNetworkDomains: TnsupdateNetworkDomains): Promise<[result: TnsupdateNetworkDomainsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQosIdByNameAsync(getQosIdByName: TnsgetQosIdByName): Promise<[result: TnsgetQosIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setEnterpriseGeneralTopicDTOAsync(setEnterpriseGeneralTopicDto: TnssetEnterpriseGeneralTopicDto): Promise<[result: TnssetEnterpriseGeneralTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateNppAccountAsync(updateNppAccount: TnsupdateNppAccount): Promise<[result: TnsupdateNppAccountResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateWuServerAsync(updateWuServer: TnsupdateWuServer): Promise<[result: TnsupdateWuServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSecretKeyAsync(getSecretKey: TnsgetSecretKey): Promise<[result: TnsgetSecretKeyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateAutonomousSystemEntriesAsync(updateAutonomousSystemEntries: TnsupdateAutonomousSystemEntries): Promise<[result: TnsupdateAutonomousSystemEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    exportPolicyAsync(exportPolicy: TnsexportPolicy): Promise<[result: TnsexportPolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addVlanCatalogEntriesAsync(addVlanCatalogEntries: TnsaddVlanCatalogEntries): Promise<[result: TnsaddVlanCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    removeRtFiltersAsync(removeRtFilters: TnsremoveRtFilters): Promise<[result: TnsremoveRtFiltersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteWebSafeUserAsync(deleteWebSafeUser: TnsdeleteWebSafeUser): Promise<[result: TnsdeleteWebSafeUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateFacebookTrafficControlDTOAsync(updateFacebookTrafficControlDto: TnsupdateFacebookTrafficControlDto): Promise<[result: TnsupdateFacebookTrafficControlDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateTubeGroupsAsync(updateTubeGroups: TnsupdateTubeGroups): Promise<[result: TnsupdateTubeGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateServicePlanAddOnEntriesAsync(updateServicePlanAddOnEntries: TnsupdateServicePlanAddOnEntries): Promise<[result: TnsupdateServicePlanAddOnEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHheIdByNameAsync(getHheIdByName: TnsgetHheIdByName): Promise<[result: TnsgetHheIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    isNetAwarenessAsync(isNetAwareness: TnsisNetAwareness): Promise<[result: TnsisNetAwarenessResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVlanGroupIdByNameAsync(getVlanGroupIdByName: TnsgetVlanGroupIdByName): Promise<[result: TnsgetVlanGroupIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingPlanEntriesAsync(getChargingPlanEntries: TnsgetChargingPlanEntries): Promise<[result: TnsgetChargingPlanEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostsByNamesAsync(getHostsByNames: TnsgetHostsByNames): Promise<[result: TnsgetHostsByNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllNeDeviceAsync(getAllNeDevice: TnsgetAllNeDevice): Promise<[result: TnsgetAllNeDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    saveControlPlaneIdentifierNamesAsync(saveControlPlaneIdentifierNames: TnssaveControlPlaneIdentifierNames): Promise<[result: TnssaveControlPlaneIdentifierNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getWebSafeUserIdByNameAsync(getWebSafeUserIdByName: TnsgetWebSafeUserIdByName): Promise<[result: TnsgetWebSafeUserIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateQosCatalogEntriesAsync(updateQosCatalogEntries: TnsupdateQosCatalogEntries): Promise<[result: TnsupdateQosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateTosCatalogEntriesAsync(updateTosCatalogEntries: TnsupdateTosCatalogEntries): Promise<[result: TnsupdateTosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateSmpGroupAsync(updateSmpGroup: TnsupdateSmpGroup): Promise<[result: TnsupdateSmpGroupResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getClientDeviceGroupEntriesByIdsAsync(getClientDeviceGroupEntriesByIds: TnsgetClientDeviceGroupEntriesByIds): Promise<[result: TnsgetClientDeviceGroupEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setProxyServerAsync(setProxyServer: TnssetProxyServer): Promise<[result: TnssetProxyServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostGroupByIdsAsync(getHostGroupByIds: TnsgetHostGroupByIds): Promise<[result: TnsgetHostGroupByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteAlertCatalogEntriesAsync(deleteAlertCatalogEntries: TnsdeleteAlertCatalogEntries): Promise<[result: TnsdeleteAlertCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    rollbackWuDeviceAsync(rollbackWuDevice: TnsrollbackWuDevice): Promise<[result: TnsrollbackWuDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGroupMemberIdByServiceIdAsync(getGroupMemberIdByServiceId: TnsgetGroupMemberIdByServiceId): Promise<[result: TnsgetGroupMemberIdByServiceIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateMobileDeviceDBAsync(updateMobileDeviceDb: TnsupdateMobileDeviceDb): Promise<[result: TnsupdateMobileDeviceDbResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateVsCatalogEntriesAsync(updateVsCatalogEntries: TnsupdateVsCatalogEntries): Promise<[result: TnsupdateVsCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCocGroupEntriesByIdsAsync(getCocGroupEntriesByIds: TnsgetCocGroupEntriesByIds): Promise<[result: TnsgetCocGroupEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQuotaPlansAsync(getQuotaPlans: TnsgetQuotaPlans): Promise<[result: TnsgetQuotaPlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getPortsTopicDTOAsync(getPortsTopicDto: TnsgetPortsTopicDto): Promise<[result: TnsgetPortsTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteHheCatalogEntriesAsync(deleteHheCatalogEntries: TnsdeleteHheCatalogEntries): Promise<[result: TnsdeleteHheCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateApplicationEntitiesAsync(updateApplicationEntities: TnsupdateApplicationEntities): Promise<[result: TnsupdateApplicationEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQosEntriesByIdsAsync(getQosEntriesByIds: TnsgetQosEntriesByIds): Promise<[result: TnsgetQosEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateTubeTCAAsync(updateTubeTca: TnsupdateTubeTca): Promise<[result: TnsupdateTubeTcaResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllCSSystemsAsync(getAllCsSystems: TnsgetAllCsSystems): Promise<[result: TnsgetAllCsSystemsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQuotaRulesByIdsAsync(getQuotaRulesByIds: TnsgetQuotaRulesByIds): Promise<[result: TnsgetQuotaRulesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setFacebookPollingTimeIntervalAsync(setFacebookPollingTimeInterval: TnssetFacebookPollingTimeInterval): Promise<[result: TnssetFacebookPollingTimeIntervalResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteMdDeviceAsync(deleteMdDevice: TnsdeleteMdDevice): Promise<[result: TnsdeleteMdDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateAutonomousSystemFileAsync(updateAutonomousSystemFile: TnsupdateAutonomousSystemFile): Promise<[result: TnsupdateAutonomousSystemFileResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateTimeCatalogEntriesAsync(updateTimeCatalogEntries: TnsupdateTimeCatalogEntries): Promise<[result: TnsupdateTimeCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllChargingConditionsByPolicyAsync(getAllChargingConditionsByPolicy: TnsgetAllChargingConditionsByPolicy): Promise<[result: TnsgetAllChargingConditionsByPolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getvlanCatalogEntriesAsync(getvlanCatalogEntries: TnsgetvlanCatalogEntries): Promise<[result: TnsgetvlanCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    loadWebSafeImportFileAsync(loadWebSafeImportFile: TnsloadWebSafeImportFile): Promise<[result: TnsloadWebSafeImportFileResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updatePolicyAsync(updatePolicy: TnsupdatePolicy): Promise<[result: TnsupdatePolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteServiceCatalogEntriesAsync(deleteServiceCatalogEntries: TnsdeleteServiceCatalogEntries): Promise<[result: TnsdeleteServiceCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllParametersAsync(getAllParameters: TnsgetAllParameters): Promise<[result: TnsgetAllParametersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    createAsymGroupsAsync(createAsymGroups: TnscreateAsymGroups): Promise<[result: TnscreateAsymGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    saveBlackListCategoriesAsync(saveBlackListCategories: TnssaveBlackListCategories): Promise<[result: TnssaveBlackListCategoriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostGroupsByNamesAsync(getHostGroupsByNames: TnsgetHostGroupsByNames): Promise<[result: TnsgetHostGroupsByNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    saveBlackListAsync(saveBlackList: TnssaveBlackList): Promise<[result: TnssaveBlackListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServicePlanAddOnEntriesByIdsAsync(getServicePlanAddOnEntriesByIds: TnsgetServicePlanAddOnEntriesByIds): Promise<[result: TnsgetServicePlanAddOnEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getUserIdByNameAsync(getUserIdByName: TnsgetUserIdByName): Promise<[result: TnsgetUserIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateQuotaPlansAsync(updateQuotaPlans: TnsupdateQuotaPlans): Promise<[result: TnsupdateQuotaPlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAlertIdByNameAsync(getAlertIdByName: TnsgetAlertIdByName): Promise<[result: TnsgetAlertIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addIfcGroupCatalogEntriesAsync(addIfcGroupCatalogEntries: TnsaddIfcGroupCatalogEntries): Promise<[result: TnsaddIfcGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    isQuotaAvilableAsync(isQuotaAvilable: TnsisQuotaAvilable): Promise<[result: TnsisQuotaAvilableResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addVlanGroupCatalogEntriesAsync(addVlanGroupCatalogEntries: TnsaddVlanGroupCatalogEntries): Promise<[result: TnsaddVlanGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getFacebookRevisionConfigurationAsync(getFacebookRevisionConfiguration: TnsgetFacebookRevisionConfiguration): Promise<[result: TnsgetFacebookRevisionConfigurationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllAlarmsAsync(getAllAlarms: TnsgetAllAlarms): Promise<[result: TnsgetAllAlarmsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    isRoutingMapBelongToDefaultNetworkDomainAsync(isRoutingMapBelongToDefaultNetworkDomain: TnsisRoutingMapBelongToDefaultNetworkDomain): Promise<[result: TnsisRoutingMapBelongToDefaultNetworkDomainResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addGreGroupCatalogEntriesAsync(addGreGroupCatalogEntries: TnsaddGreGroupCatalogEntries): Promise<[result: TnsaddGreGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQoeRuleDefEntriesByIdsAsync(getQoeRuleDefEntriesByIds: TnsgetQoeRuleDefEntriesByIds): Promise<[result: TnsgetQoeRuleDefEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteIfcPortCatalogEntriesAsync(deleteIfcPortCatalogEntries: TnsdeleteIfcPortCatalogEntries): Promise<[result: TnsdeleteIfcPortCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateGreGroupCatalogEntriesAsync(updateGreGroupCatalogEntries: TnsupdateGreGroupCatalogEntries): Promise<[result: TnsupdateGreGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTosIdByNameAsync(getTosIdByName: TnsgetTosIdByName): Promise<[result: TnsgetTosIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteIfcGroupCatalogEntriesAsync(deleteIfcGroupCatalogEntries: TnsdeleteIfcGroupCatalogEntries): Promise<[result: TnsdeleteIfcGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getProxyServerAsync(getProxyServer: TnsgetProxyServer): Promise<[result: TnsgetProxyServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSGTopicAsync(getSgTopic: TnsgetSgTopic): Promise<[result: TnsgetSgTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubeGroupsAsync(getTubeGroups: TnsgetTubeGroups): Promise<[result: TnsgetTubeGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    modifyRemoteNxsAsync(modifyRemoteNxs: TnsmodifyRemoteNxs): Promise<[result: TnsmodifyRemoteNxsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getLicenseVersionAsync(getLicenseVersion: TnsgetLicenseVersion): Promise<[result: TnsgetLicenseVersionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getClientDeviceIdByNameAsync(getClientDeviceIdByName: TnsgetClientDeviceIdByName): Promise<[result: TnsgetClientDeviceIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDataExportConfigAsync(getDataExportConfig: TnsgetDataExportConfig): Promise<[result: TnsgetDataExportConfigResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGreIdByNameAsync(getGreIdByName: TnsgetGreIdByName): Promise<[result: TnsgetGreIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostIdByNameAsync(getHostIdByName: TnsgetHostIdByName): Promise<[result: TnsgetHostIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllApplicationEntitiesAsync(getAllApplicationEntities: TnsgetAllApplicationEntities): Promise<[result: TnsgetAllApplicationEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addChargingRuleAsync(addChargingRule: TnsaddChargingRule): Promise<[result: TnsaddChargingRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTosEntriesByIdsAsync(getTosEntriesByIds: TnsgetTosEntriesByIds): Promise<[result: TnsgetTosEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    reloadProductCapabilitiesAsync(reloadProductCapabilities: TnsreloadProductCapabilities): Promise<[result: TnsreloadProductCapabilitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubeDTO1Async(getTubeDto1: TnsgetTubeDto1): Promise<[result: TnsgetTubeDto1Response, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteGreGroupCatalogEntriesAsync(deleteGreGroupCatalogEntries: TnsdeleteGreGroupCatalogEntries): Promise<[result: TnsdeleteGreGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setDeviceSecurityTopicAsync(setDeviceSecurityTopic: TnssetDeviceSecurityTopic): Promise<[result: TnssetDeviceSecurityTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    dumpCacheAsync(dumpCache: TnsdumpCache): Promise<[result: TnsdumpCacheResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getPolicyIdByNameAsync(getPolicyIdByName: TnsgetPolicyIdByName): Promise<[result: TnsgetPolicyIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getNetworkDomainsByIdsAsync(getNetworkDomainsByIds: TnsgetNetworkDomainsByIds): Promise<[result: TnsgetNetworkDomainsByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQoeRuleDefCatalogEntriesAsync(getQoeRuleDefCatalogEntries: TnsgetQoeRuleDefCatalogEntries): Promise<[result: TnsgetQoeRuleDefCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getRemoteNxEntitiesAsync(getRemoteNxEntities: TnsgetRemoteNxEntities): Promise<[result: TnsgetRemoteNxEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDefaultAggregationsAsync(getDefaultAggregations: TnsgetDefaultAggregations): Promise<[result: TnsgetDefaultAggregationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setParametersAsync(setParameters: TnssetParameters): Promise<[result: TnssetParametersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getContentKeyIDAsync(getContentKeyId: TnsgetContentKeyId): Promise<[result: TnsgetContentKeyIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addAutonomousSystemEntriesAsync(addAutonomousSystemEntries: TnsaddAutonomousSystemEntries): Promise<[result: TnsaddAutonomousSystemEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteServicePlanAddOnEntriesAsync(deleteServicePlanAddOnEntries: TnsdeleteServicePlanAddOnEntries): Promise<[result: TnsdeleteServicePlanAddOnEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getBlackListAsync(getBlackList: TnsgetBlackList): Promise<[result: TnsgetBlackListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateQoeRuleDefCatalogEntriesAsync(updateQoeRuleDefCatalogEntries: TnsupdateQoeRuleDefCatalogEntries): Promise<[result: TnsupdateQoeRuleDefCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    removeNppAccountsAsync(removeNppAccounts: TnsremoveNppAccounts): Promise<[result: TnsremoveNppAccountsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllChargingRuleByPolicyAsync(getAllChargingRuleByPolicy: TnsgetAllChargingRuleByPolicy): Promise<[result: TnsgetAllChargingRuleByPolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    fetchCellSectorsAsync(fetchCellSectors: TnsfetchCellSectors): Promise<[result: TnsfetchCellSectorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addNppAccountAsync(addNppAccount: TnsaddNppAccount): Promise<[result: TnsaddNppAccountResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteCocGroupCatalogEntriesAsync(deleteCocGroupCatalogEntries: TnsdeleteCocGroupCatalogEntries): Promise<[result: TnsdeleteCocGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addBiHaGroupAsync(addBiHaGroup: TnsaddBiHaGroup): Promise<[result: TnsaddBiHaGroupResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateDmGlobalInputFilteringRuleEntitiesAsync(updateDmGlobalInputFilteringRuleEntities: TnsupdateDmGlobalInputFilteringRuleEntities): Promise<[result: TnsupdateDmGlobalInputFilteringRuleEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getUserSpecificServiceEntitiesAsync(getUserSpecificServiceEntities: TnsgetUserSpecificServiceEntities): Promise<[result: TnsgetUserSpecificServiceEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateDosCatalogEntriesAsync(updateDosCatalogEntries: TnsupdateDosCatalogEntries): Promise<[result: TnsupdateDosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addHheCatalogEntriesAsync(addHheCatalogEntries: TnsaddHheCatalogEntries): Promise<[result: TnsaddHheCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGreGroupIdByNameAsync(getGreGroupIdByName: TnsgetGreGroupIdByName): Promise<[result: TnsgetGreGroupIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTosCatalogEntriesAsync(getTosCatalogEntries: TnsgetTosCatalogEntries): Promise<[result: TnsgetTosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addTimeCatalogEntriesAsync(addTimeCatalogEntries: TnsaddTimeCatalogEntries): Promise<[result: TnsaddTimeCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllNetworkDomainsAsync(getAllNetworkDomains: TnsgetAllNetworkDomains): Promise<[result: TnsgetAllNetworkDomainsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    isSupportedPropertyAsync(isSupportedProperty: TnsisSupportedProperty): Promise<[result: TnsisSupportedPropertyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQosCatalogEntriesAsync(getQosCatalogEntries: TnsgetQosCatalogEntries): Promise<[result: TnsgetQosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteSmpGroupAsync(deleteSmpGroup: TnsdeleteSmpGroup): Promise<[result: TnsdeleteSmpGroupResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteHostCatalogEntriesAsync(deleteHostCatalogEntries: TnsdeleteHostCatalogEntries): Promise<[result: TnsdeleteHostCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addTubeGroupsAsync(addTubeGroups: TnsaddTubeGroups): Promise<[result: TnsaddTubeGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceGroupsAsync(getServiceGroups: TnsgetServiceGroups): Promise<[result: TnsgetServiceGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingPlan2AppEntitieaByNameAsync(getChargingPlan2AppEntitieaByName: TnsgetChargingPlan2AppEntitieaByName): Promise<[result: TnsgetChargingPlan2AppEntitieaByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    findCsEtlCountByCollectorIdAsync(findCsEtlCountByCollectorId: TnsfindCsEtlCountByCollectorId): Promise<[result: TnsfindCsEtlCountByCollectorIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDmGlobalTriggerTimeoutAsync(getDmGlobalTriggerTimeout: TnsgetDmGlobalTriggerTimeout): Promise<[result: TnsgetDmGlobalTriggerTimeoutResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getIfcGroupCatalogEntriesAsync(getIfcGroupCatalogEntries: TnsgetIfcGroupCatalogEntries): Promise<[result: TnsgetIfcGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    isFeatureEnabledAsync(isFeatureEnabled: TnsisFeatureEnabled): Promise<[result: TnsisFeatureEnabledResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addVsCatalogEntriesAsync(addVsCatalogEntries: TnsaddVsCatalogEntries): Promise<[result: TnsaddVsCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCocGroupCatalogEntriesAsync(getCocGroupCatalogEntries: TnsgetCocGroupCatalogEntries): Promise<[result: TnsgetCocGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteQuotaPlansAsync(deleteQuotaPlans: TnsdeleteQuotaPlans): Promise<[result: TnsdeleteQuotaPlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getNetUnitInterfaceStatusAsync(getNetUnitInterfaceStatus: TnsgetNetUnitInterfaceStatus): Promise<[result: TnsgetNetUnitInterfaceStatusResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubeTCAsAsync(getTubeTcAs: TnsgetTubeTcAs): Promise<[result: TnsgetTubeTcAsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateVlanCatalogEntriesAsync(updateVlanCatalogEntries: TnsupdateVlanCatalogEntries): Promise<[result: TnsupdateVlanCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addServiceCatalogEntriesAsync(addServiceCatalogEntries: TnsaddServiceCatalogEntries): Promise<[result: TnsaddServiceCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCocIdByNameAsync(getCocIdByName: TnsgetCocIdByName): Promise<[result: TnsgetCocIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingPlanEntityByNameAsync(getChargingPlanEntityByName: TnsgetChargingPlanEntityByName): Promise<[result: TnsgetChargingPlanEntityByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateMdDeviceAsync(updateMdDevice: TnsupdateMdDevice): Promise<[result: TnsupdateMdDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteAutonomousSystemFileAsync(deleteAutonomousSystemFile: TnsdeleteAutonomousSystemFile): Promise<[result: TnsdeleteAutonomousSystemFileResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setDmEncryptionKeyAsync(setDmEncryptionKey: TnssetDmEncryptionKey): Promise<[result: TnssetDmEncryptionKeyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getEnterpriseSnmpTopicDTOAsync(getEnterpriseSnmpTopicDto: TnsgetEnterpriseSnmpTopicDto): Promise<[result: TnsgetEnterpriseSnmpTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateCocCatalogEntriesAsync(updateCocCatalogEntries: TnsupdateCocCatalogEntries): Promise<[result: TnsupdateCocCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getEnterpriseServersTopicDTOAsync(getEnterpriseServersTopicDto: TnsgetEnterpriseServersTopicDto): Promise<[result: TnsgetEnterpriseServersTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDmGlobalInputFilteringRuleXMLAsync(getDmGlobalInputFilteringRuleXml: TnsgetDmGlobalInputFilteringRuleXml): Promise<[result: TnsgetDmGlobalInputFilteringRuleXmlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteEventActionCatalogEntriesAsync(deleteEventActionCatalogEntries: TnsdeleteEventActionCatalogEntries): Promise<[result: TnsdeleteEventActionCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSyslogConnectionsAsync(getSyslogConnections: TnsgetSyslogConnections): Promise<[result: TnsgetSyslogConnectionsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setConfigurationAsync(setConfiguration: TnssetConfiguration): Promise<[result: TnssetConfigurationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addTosCatalogEntriesAsync(addTosCatalogEntries: TnsaddTosCatalogEntries): Promise<[result: TnsaddTosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addQoeRuleDefCatalogEntriesAsync(addQoeRuleDefCatalogEntries: TnsaddQoeRuleDefCatalogEntries): Promise<[result: TnsaddQoeRuleDefCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setEncryptedDatabasePasswordAsync(setEncryptedDatabasePassword: TnssetEncryptedDatabasePassword): Promise<[result: TnssetEncryptedDatabasePasswordResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addQosCatalogEntriesAsync(addQosCatalogEntries: TnsaddQosCatalogEntries): Promise<[result: TnsaddQosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addRtFiltersAsync(addRtFilters: TnsaddRtFilters): Promise<[result: TnsaddRtFiltersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteQuotaRulesAsync(deleteQuotaRules: TnsdeleteQuotaRules): Promise<[result: TnsdeleteQuotaRulesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateVlanGroupCatalogEntriesAsync(updateVlanGroupCatalogEntries: TnsupdateVlanGroupCatalogEntries): Promise<[result: TnsupdateVlanGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateSmpRadiusTargetsAsync(updateSmpRadiusTargets: TnsupdateSmpRadiusTargets): Promise<[result: TnsupdateSmpRadiusTargetsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getFacebookTrafficControlDTOAsync(getFacebookTrafficControlDto: TnsgetFacebookTrafficControlDto): Promise<[result: TnsgetFacebookTrafficControlDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getRemoteNxsByNamesAsync(getRemoteNxsByNames: TnsgetRemoteNxsByNames): Promise<[result: TnsgetRemoteNxsByNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDeviceByNameAsync(getDeviceByName: TnsgetDeviceByName): Promise<[result: TnsgetDeviceByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHheCatalogEntriesAsync(getHheCatalogEntries: TnsgetHheCatalogEntries): Promise<[result: TnsgetHheCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setDmGlobalTriggerTimeoutAsync(setDmGlobalTriggerTimeout: TnssetDmGlobalTriggerTimeout): Promise<[result: TnssetDmGlobalTriggerTimeoutResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingAppIdByNameAsync(getChargingAppIdByName: TnsgetChargingAppIdByName): Promise<[result: TnsgetChargingAppIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getIfcPortCatalogEntriesAsync(getIfcPortCatalogEntries: TnsgetIfcPortCatalogEntries): Promise<[result: TnsgetIfcPortCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDeviceSecurityTopicAsync(getDeviceSecurityTopic: TnsgetDeviceSecurityTopic): Promise<[result: TnsgetDeviceSecurityTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    validateSSGExistenceAsync(validateSsgExistence: TnsvalidateSsgExistence): Promise<[result: TnsvalidateSsgExistenceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceDataByIdsAsync(getServiceDataByIds: TnsgetServiceDataByIds): Promise<[result: TnsgetServiceDataByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    prepareToRedistributeAsync(prepareToRedistribute: TnsprepareToRedistribute): Promise<[result: TnsprepareToRedistributeResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setNxLicenseAsync(setNxLicense: TnssetNxLicense): Promise<[result: TnssetNxLicenseResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteQosCatalogEntriesAsync(deleteQosCatalogEntries: TnsdeleteQosCatalogEntries): Promise<[result: TnsdeleteQosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSmpSessionUpdatesAttributesFromTopicAsync(getSmpSessionUpdatesAttributesFromTopic: TnsgetSmpSessionUpdatesAttributesFromTopic): Promise<[result: TnsgetSmpSessionUpdatesAttributesFromTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addQuotaEntriesAsync(addQuotaEntries: TnsaddQuotaEntries): Promise<[result: TnsaddQuotaEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteTosCatalogEntriesAsync(deleteTosCatalogEntries: TnsdeleteTosCatalogEntries): Promise<[result: TnsdeleteTosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostEntriesByIdsAsync(getHostEntriesByIds: TnsgetHostEntriesByIds): Promise<[result: TnsgetHostEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQuotaEntriesAsync(getQuotaEntries: TnsgetQuotaEntries): Promise<[result: TnsgetQuotaEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    rollbackWuServerAsync(rollbackWuServer: TnsrollbackWuServer): Promise<[result: TnsrollbackWuServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addAlertCatalogEntriesAsync(addAlertCatalogEntries: TnsaddAlertCatalogEntries): Promise<[result: TnsaddAlertCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getParameterAsync(getParameter: TnsgetParameter): Promise<[result: TnsgetParameterResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setDmFieldExtensionAsync(setDmFieldExtension: TnssetDmFieldExtension): Promise<[result: TnssetDmFieldExtensionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setPortsTopicDTOAsync(setPortsTopicDto: TnssetPortsTopicDto): Promise<[result: TnssetPortsTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingPolicyAsync(getChargingPolicy: TnsgetChargingPolicy): Promise<[result: TnsgetChargingPolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateQuotaRulesAsync(updateQuotaRules: TnsupdateQuotaRules): Promise<[result: TnsupdateQuotaRulesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllDMOutputRecordsAsync(getAllDmOutputRecords: TnsgetAllDmOutputRecords): Promise<[result: TnsgetAllDmOutputRecordsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getUserSpecificServiceByNameAsync(getUserSpecificServiceByName: TnsgetUserSpecificServiceByName): Promise<[result: TnsgetUserSpecificServiceByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getWebSafeUserByNameAsync(getWebSafeUserByName: TnsgetWebSafeUserByName): Promise<[result: TnsgetWebSafeUserByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateDmOutputProfileAsync(updateDmOutputProfile: TnsupdateDmOutputProfile): Promise<[result: TnsupdateDmOutputProfileResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getMonitoredServiceGroupEntriesByIdsAsync(getMonitoredServiceGroupEntriesByIds: TnsgetMonitoredServiceGroupEntriesByIds): Promise<[result: TnsgetMonitoredServiceGroupEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addChargingApplicationEntriesAsync(addChargingApplicationEntries: TnsaddChargingApplicationEntries): Promise<[result: TnsaddChargingApplicationEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getSmpAttributeTopicAsync(getSmpAttributeTopic: TnsgetSmpAttributeTopic): Promise<[result: TnsgetSmpAttributeTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllRedundantUnitsAsync(getAllRedundantUnits: TnsgetAllRedundantUnits): Promise<[result: TnsgetAllRedundantUnitsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getMonitoredServiceGroupEntriesAsync(getMonitoredServiceGroupEntries: TnsgetMonitoredServiceGroupEntries): Promise<[result: TnsgetMonitoredServiceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTopologyCollectorAsync(getTopologyCollector: TnsgetTopologyCollector): Promise<[result: TnsgetTopologyCollectorResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getUserByNameAsync(getUserByName: TnsgetUserByName): Promise<[result: TnsgetUserByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateServiceCatalogEntriesAsync(updateServiceCatalogEntries: TnsupdateServiceCatalogEntries): Promise<[result: TnsupdateServiceCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getApplicationEntitiesByIdsAsync(getApplicationEntitiesByIds: TnsgetApplicationEntitiesByIds): Promise<[result: TnsgetApplicationEntitiesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getUserSpecificServiceIdByNameAsync(getUserSpecificServiceIdByName: TnsgetUserSpecificServiceIdByName): Promise<[result: TnsgetUserSpecificServiceIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQoeRuleDefIdByNameAsync(getQoeRuleDefIdByName: TnsgetQoeRuleDefIdByName): Promise<[result: TnsgetQoeRuleDefIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAutonomousSystemIdByNameAsync(getAutonomousSystemIdByName: TnsgetAutonomousSystemIdByName): Promise<[result: TnsgetAutonomousSystemIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteChargingPlanEntriesAsync(deleteChargingPlanEntries: TnsdeleteChargingPlanEntries): Promise<[result: TnsdeleteChargingPlanEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAutonomousSystemEntryByNameAsync(getAutonomousSystemEntryByName: TnsgetAutonomousSystemEntryByName): Promise<[result: TnsgetAutonomousSystemEntryByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getEventActionEntriesByIdsAsync(getEventActionEntriesByIds: TnsgetEventActionEntriesByIds): Promise<[result: TnsgetEventActionEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getActionCatalogEntriesAsync(getActionCatalogEntries: TnsgetActionCatalogEntries): Promise<[result: TnsgetActionCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getMdDeviceByNameAsync(getMdDeviceByName: TnsgetMdDeviceByName): Promise<[result: TnsgetMdDeviceByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostCatalogEntriesAsync(getHostCatalogEntries: TnsgetHostCatalogEntries): Promise<[result: TnsgetHostCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteHostGroupsAsync(deleteHostGroups: TnsdeleteHostGroups): Promise<[result: TnsdeleteHostGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateEventActionCatalogEntriesAsync(updateEventActionCatalogEntries: TnsupdateEventActionCatalogEntries): Promise<[result: TnsupdateEventActionCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addQuotaPlansAsync(addQuotaPlans: TnsaddQuotaPlans): Promise<[result: TnsaddQuotaPlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addServicePlansAsync(addServicePlans: TnsaddServicePlans): Promise<[result: TnsaddServicePlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteDeviceAsync(deleteDevice: TnsdeleteDevice): Promise<[result: TnsdeleteDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getNppAccountByNameAsync(getNppAccountByName: TnsgetNppAccountByName): Promise<[result: TnsgetNppAccountByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateQuotaCatalogEntriesAsync(updateQuotaCatalogEntries: TnsupdateQuotaCatalogEntries): Promise<[result: TnsupdateQuotaCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubeGroupsByUserAsync(getTubeGroupsByUser: TnsgetTubeGroupsByUser): Promise<[result: TnsgetTubeGroupsByUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateServiceGroupsAsync(updateServiceGroups: TnsupdateServiceGroups): Promise<[result: TnsupdateServiceGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubesByNamesAsync(getTubesByNames: TnsgetTubesByNames): Promise<[result: TnsgetTubesByNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteServicePlansAsync(deleteServicePlans: TnsdeleteServicePlans): Promise<[result: TnsdeleteServicePlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getLicenseAsync(getLicense: TnsgetLicense): Promise<[result: TnsgetLicenseResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    insertQuotaEventAsync(insertQuotaEvent: TnsinsertQuotaEvent): Promise<[result: TnsinsertQuotaEventResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateIfcPortCatalogEntriesAsync(updateIfcPortCatalogEntries: TnsupdateIfcPortCatalogEntries): Promise<[result: TnsupdateIfcPortCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addEventActionCatalogEntriesAsync(addEventActionCatalogEntries: TnsaddEventActionCatalogEntries): Promise<[result: TnsaddEventActionCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteChargingApplicationEntriesAsync(deleteChargingApplicationEntries: TnsdeleteChargingApplicationEntries): Promise<[result: TnsdeleteChargingApplicationEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    pollAsync(poll: Tnspoll): Promise<[result: TnspollResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubeByNamesAsync(getTubeByNames: TnsgetTubeByNames): Promise<[result: TnsgetTubeByNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setDmProfileEscapeCharAsync(setDmProfileEscapeChar: TnssetDmProfileEscapeChar): Promise<[result: TnssetDmProfileEscapeCharResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateDeviceTCAAsync(updateDeviceTca: TnsupdateDeviceTca): Promise<[result: TnsupdateDeviceTcaResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServicePlanIdByNameAsync(getServicePlanIdByName: TnsgetServicePlanIdByName): Promise<[result: TnsgetServicePlanIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addCocGroupCatalogEntriesAsync(addCocGroupCatalogEntries: TnsaddCocGroupCatalogEntries): Promise<[result: TnsaddCocGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateSubnetMapFileAsync(updateSubnetMapFile: TnsupdateSubnetMapFile): Promise<[result: TnsupdateSubnetMapFileResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCocGroupIdByNameAsync(getCocGroupIdByName: TnsgetCocGroupIdByName): Promise<[result: TnsgetCocGroupIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addUserAsync(addUser: TnsaddUser): Promise<[result: TnsaddUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getNMSReturnCodeAsync(getNmsReturnCode: TnsgetNmsReturnCode): Promise<[result: TnsgetNmsReturnCodeResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServicePlanAddOnEntriesAsync(getServicePlanAddOnEntries: TnsgetServicePlanAddOnEntries): Promise<[result: TnsgetServicePlanAddOnEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateCocGroupCatalogEntriesAsync(updateCocGroupCatalogEntries: TnsupdateCocGroupCatalogEntries): Promise<[result: TnsupdateCocGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateHostCatalogEntriesAsync(updateHostCatalogEntries: TnsupdateHostCatalogEntries): Promise<[result: TnsupdateHostCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    createFullSetupAsync(createFullSetup: TnscreateFullSetup): Promise<[result: TnscreateFullSetupResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getNxLicenseAsync(getNxLicense: TnsgetNxLicense): Promise<[result: TnsgetNxLicenseResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getEnterpriseGeneralTopicDTOAsync(getEnterpriseGeneralTopicDto: TnsgetEnterpriseGeneralTopicDto): Promise<[result: TnsgetEnterpriseGeneralTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getContentKeyLocalIDAsync(getContentKeyLocalId: TnsgetContentKeyLocalId): Promise<[result: TnsgetContentKeyLocalIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    sendGenericEventAsync(sendGenericEvent: TnssendGenericEvent): Promise<[result: TnssendGenericEventResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setNetAwarenessTopicAsync(setNetAwarenessTopic: TnssetNetAwarenessTopic): Promise<[result: TnssetNetAwarenessTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubeGroupsByIdsAsync(getTubeGroupsByIds: TnsgetTubeGroupsByIds): Promise<[result: TnsgetTubeGroupsByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGroupByNameAsync(getGroupByName: TnsgetGroupByName): Promise<[result: TnsgetGroupByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    checkRedundantUnitsAsync(checkRedundantUnits: TnscheckRedundantUnits): Promise<[result: TnscheckRedundantUnitsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateIfcGroupCatalogEntriesAsync(updateIfcGroupCatalogEntries: TnsupdateIfcGroupCatalogEntries): Promise<[result: TnsupdateIfcGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceCatalogEntriesAsync(getServiceCatalogEntries: TnsgetServiceCatalogEntries): Promise<[result: TnsgetServiceCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getNetAwarenessTopicAsync(getNetAwarenessTopic: TnsgetNetAwarenessTopic): Promise<[result: TnsgetNetAwarenessTopicResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    isNxFeatureEnabledAsync(isNxFeatureEnabled: TnsisNxFeatureEnabled): Promise<[result: TnsisNxFeatureEnabledResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateGreCatalogEntriesAsync(updateGreCatalogEntries: TnsupdateGreCatalogEntries): Promise<[result: TnsupdateGreCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDeviceByIdAsync(getDeviceById: TnsgetDeviceById): Promise<[result: TnsgetDeviceByIdResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getRoutingMapIdByNameFromDefaultNetworkDomainAsync(getRoutingMapIdByNameFromDefaultNetworkDomain: TnsgetRoutingMapIdByNameFromDefaultNetworkDomain): Promise<[result: TnsgetRoutingMapIdByNameFromDefaultNetworkDomainResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceCatLocalIdByNameAsync(getServiceCatLocalIdByName: TnsgetServiceCatLocalIdByName): Promise<[result: TnsgetServiceCatLocalIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addDeviceAsync(addDevice: TnsaddDevice): Promise<[result: TnsaddDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getPolicyDistributionGroupByNameAsync(getPolicyDistributionGroupByName: TnsgetPolicyDistributionGroupByName): Promise<[result: TnsgetPolicyDistributionGroupByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addMonitoredServiceGroupEntriesAsync(addMonitoredServiceGroupEntries: TnsaddMonitoredServiceGroupEntries): Promise<[result: TnsaddMonitoredServiceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQuotaEventsAsync(getQuotaEvents: TnsgetQuotaEvents): Promise<[result: TnsgetQuotaEventsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setEnterpriseExternalServerTopicDTOAsync(setEnterpriseExternalServerTopicDto: TnssetEnterpriseExternalServerTopicDto): Promise<[result: TnssetEnterpriseExternalServerTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addHostGroupsAsync(addHostGroups: TnsaddHostGroups): Promise<[result: TnsaddHostGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServicePlanByNameAsync(getServicePlanByName: TnsgetServicePlanByName): Promise<[result: TnsgetServicePlanByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getIfcGroupIdByNameAsync(getIfcGroupIdByName: TnsgetIfcGroupIdByName): Promise<[result: TnsgetIfcGroupIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addDosCatalogEntriesAsync(addDosCatalogEntries: TnsaddDosCatalogEntries): Promise<[result: TnsaddDosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteBiHaGroupAsync(deleteBiHaGroup: TnsdeleteBiHaGroup): Promise<[result: TnsdeleteBiHaGroupResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addApplicationEntitiesAsync(addApplicationEntities: TnsaddApplicationEntities): Promise<[result: TnsaddApplicationEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAsymGroupsAsync(getAsymGroups: TnsgetAsymGroups): Promise<[result: TnsgetAsymGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingApp2ServiceEntitiesAsync(getChargingApp2ServiceEntities: TnsgetChargingApp2ServiceEntities): Promise<[result: TnsgetChargingApp2ServiceEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTubeDTOAsync(getTubeDto: TnsgetTubeDto): Promise<[result: TnsgetTubeDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addWorkServerAsync(addWorkServer: TnsaddWorkServer): Promise<[result: TnsaddWorkServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGreGroupCatalogEntriesAsync(getGreGroupCatalogEntries: TnsgetGreGroupCatalogEntries): Promise<[result: TnsgetGreGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addSmpGroupAsync(addSmpGroup: TnsaddSmpGroup): Promise<[result: TnsaddSmpGroupResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteChargingRuleAsync(deleteChargingRule: TnsdeleteChargingRule): Promise<[result: TnsdeleteChargingRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTimeEntriesByIdsAsync(getTimeEntriesByIds: TnsgetTimeEntriesByIds): Promise<[result: TnsgetTimeEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDosEntriesByIdsAsync(getDosEntriesByIds: TnsgetDosEntriesByIds): Promise<[result: TnsgetDosEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateWuDeviceAsync(updateWuDevice: TnsupdateWuDevice): Promise<[result: TnsupdateWuDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteMonitoredServiceGroupEntriesAsync(deleteMonitoredServiceGroupEntries: TnsdeleteMonitoredServiceGroupEntries): Promise<[result: TnsdeleteMonitoredServiceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVlanGroupCatalogEntriesAsync(getVlanGroupCatalogEntries: TnsgetVlanGroupCatalogEntries): Promise<[result: TnsgetVlanGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addClientDeviceGroupEntriesAsync(addClientDeviceGroupEntries: TnsaddClientDeviceGroupEntries): Promise<[result: TnsaddClientDeviceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateHheCatalogEntriesAsync(updateHheCatalogEntries: TnsupdateHheCatalogEntries): Promise<[result: TnsupdateHheCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addCocCatalogEntriesAsync(addCocCatalogEntries: TnsaddCocCatalogEntries): Promise<[result: TnsaddCocCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getPipesAsync(getPipes: TnsgetPipes): Promise<[result: TnsgetPipesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    revertMonitoredServiceMembersToDefaultAsync(revertMonitoredServiceMembersToDefault: TnsrevertMonitoredServiceMembersToDefault): Promise<[result: TnsrevertMonitoredServiceMembersToDefaultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    exportPolicy1Async(exportPolicy1: TnsexportPolicy1): Promise<[result: TnsexportPolicy1Response, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setEnterpriseCsTopicDTOAsync(setEnterpriseCsTopicDto: TnssetEnterpriseCsTopicDto): Promise<[result: TnssetEnterpriseCsTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getIfcGroupEntriesByIdsAsync(getIfcGroupEntriesByIds: TnsgetIfcGroupEntriesByIds): Promise<[result: TnsgetIfcGroupEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addMdDeviceAsync(addMdDevice: TnsaddMdDevice): Promise<[result: TnsaddMdDeviceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingApplicationEntriesAsync(getChargingApplicationEntries: TnsgetChargingApplicationEntries): Promise<[result: TnsgetChargingApplicationEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getControlPlaneIdentifierNamesAsync(getControlPlaneIdentifierNames: TnsgetControlPlaneIdentifierNames): Promise<[result: TnsgetControlPlaneIdentifierNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteQuotaCatalogEntriesAsync(deleteQuotaCatalogEntries: TnsdeleteQuotaCatalogEntries): Promise<[result: TnsdeleteQuotaCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTimeCatalogEntriesAsync(getTimeCatalogEntries: TnsgetTimeCatalogEntries): Promise<[result: TnsgetTimeCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setEnterpriseSnmpTopicDTOAsync(setEnterpriseSnmpTopicDto: TnssetEnterpriseSnmpTopicDto): Promise<[result: TnssetEnterpriseSnmpTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllTopologyCollectorsAsync(getAllTopologyCollectors: TnsgetAllTopologyCollectors): Promise<[result: TnsgetAllTopologyCollectorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDmFieldExtensionAsync(getDmFieldExtension: TnsgetDmFieldExtension): Promise<[result: TnsgetDmFieldExtensionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteCocCatalogEntriesAsync(deleteCocCatalogEntries: TnsdeleteCocCatalogEntries): Promise<[result: TnsdeleteCocCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceIdByNameAsync(getServiceIdByName: TnsgetServiceIdByName): Promise<[result: TnsgetServiceIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVlanIdByNameAsync(getVlanIdByName: TnsgetVlanIdByName): Promise<[result: TnsgetVlanIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateUserAsync(updateUser: TnsupdateUser): Promise<[result: TnsupdateUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addNetworkDomainsAsync(addNetworkDomains: TnsaddNetworkDomains): Promise<[result: TnsaddNetworkDomainsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAlertCounterEntriesByOIdsAsync(getAlertCounterEntriesByOIds: TnsgetAlertCounterEntriesByOIds): Promise<[result: TnsgetAlertCounterEntriesByOIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHheEntriesByIdsAsync(getHheEntriesByIds: TnsgetHheEntriesByIds): Promise<[result: TnsgetHheEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGreCatalogEntriesAsync(getGreCatalogEntries: TnsgetGreCatalogEntries): Promise<[result: TnsgetGreCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getQuotaRulesAsync(getQuotaRules: TnsgetQuotaRules): Promise<[result: TnsgetQuotaRulesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getHostGroupsAsync(getHostGroups: TnsgetHostGroups): Promise<[result: TnsgetHostGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addSmpRadiusTargetsAsync(addSmpRadiusTargets: TnsaddSmpRadiusTargets): Promise<[result: TnsaddSmpRadiusTargetsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateChargingApplicationEntriesAsync(updateChargingApplicationEntries: TnsupdateChargingApplicationEntries): Promise<[result: TnsupdateChargingApplicationEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteTimeCatalogEntriesAsync(deleteTimeCatalogEntries: TnsdeleteTimeCatalogEntries): Promise<[result: TnsdeleteTimeCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getInputFilteringRuleListFromXMLAsync(getInputFilteringRuleListFromXml: TnsgetInputFilteringRuleListFromXml): Promise<[result: TnsgetInputFilteringRuleListFromXmlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addServicePlanAddOnEntriesAsync(addServicePlanAddOnEntries: TnsaddServicePlanAddOnEntries): Promise<[result: TnsaddServicePlanAddOnEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVsEntriesByIdsAsync(getVsEntriesByIds: TnsgetVsEntriesByIds): Promise<[result: TnsgetVsEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    resolveCatalogNamesAsync(resolveCatalogNames: TnsresolveCatalogNames): Promise<[result: TnsresolveCatalogNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAlertCatalogEntriesAsync(getAlertCatalogEntries: TnsgetAlertCatalogEntries): Promise<[result: TnsgetAlertCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateHostGroupsAsync(updateHostGroups: TnsupdateHostGroups): Promise<[result: TnsupdateHostGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateDeployedFacebookRevisionAsync(updateDeployedFacebookRevision: TnsupdateDeployedFacebookRevision): Promise<[result: TnsupdateDeployedFacebookRevisionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addCountryClassificationAsync(addCountryClassification: TnsaddCountryClassification): Promise<[result: TnsaddCountryClassificationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCocEntriesByIdsAsync(getCocEntriesByIds: TnsgetCocEntriesByIds): Promise<[result: TnsgetCocEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addHostCatalogEntriesAsync(addHostCatalogEntries: TnsaddHostCatalogEntries): Promise<[result: TnsaddHostCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getEnterpriseExternalServerTopicDTOAsync(getEnterpriseExternalServerTopicDto: TnsgetEnterpriseExternalServerTopicDto): Promise<[result: TnsgetEnterpriseExternalServerTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    sendASGeoBackupEventAsync(sendAsGeoBackupEvent: TnssendAsGeoBackupEvent): Promise<[result: TnssendAsGeoBackupEventResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteAutonomousSystemEntriesAsync(deleteAutonomousSystemEntries: TnsdeleteAutonomousSystemEntries): Promise<[result: TnsdeleteAutonomousSystemEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateDMOutputRecordAsync(updateDmOutputRecord: TnsupdateDmOutputRecord): Promise<[result: TnsupdateDmOutputRecordResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateServicePlansAsync(updateServicePlans: TnsupdateServicePlans): Promise<[result: TnsupdateServicePlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteWorkServerAsync(deleteWorkServer: TnsdeleteWorkServer): Promise<[result: TnsdeleteWorkServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getPolicyAsync(getPolicy: TnsgetPolicy): Promise<[result: TnsgetPolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getEnterpriseAddedServicesTopicDTOAsync(getEnterpriseAddedServicesTopicDto: TnsgetEnterpriseAddedServicesTopicDto): Promise<[result: TnsgetEnterpriseAddedServicesTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServicePlansByIdsAsync(getServicePlansByIds: TnsgetServicePlansByIds): Promise<[result: TnsgetServicePlansByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getPortsAsync(getPorts: TnsgetPorts): Promise<[result: TnsgetPortsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteVlanGroupCatalogEntriesAsync(deleteVlanGroupCatalogEntries: TnsdeleteVlanGroupCatalogEntries): Promise<[result: TnsdeleteVlanGroupCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    revertServiceEntryToDefaultAsync(revertServiceEntryToDefault: TnsrevertServiceEntryToDefault): Promise<[result: TnsrevertServiceEntryToDefaultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServicePlansAsync(getServicePlans: TnsgetServicePlans): Promise<[result: TnsgetServicePlansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getGreEntriesByIdsAsync(getGreEntriesByIds: TnsgetGreEntriesByIds): Promise<[result: TnsgetGreEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVlanGroupEntriesByIdsAsync(getVlanGroupEntriesByIds: TnsgetVlanGroupEntriesByIds): Promise<[result: TnsgetVlanGroupEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    modifyTopologyCollectorAsync(modifyTopologyCollector: TnsmodifyTopologyCollector): Promise<[result: TnsmodifyTopologyCollectorResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllDmOutputProfileEntitiesAsync(getAllDmOutputProfileEntities: TnsgetAllDmOutputProfileEntities): Promise<[result: TnsgetAllDmOutputProfileEntitiesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateAllChargingRuleForCostAsync(updateAllChargingRuleForCost: TnsupdateAllChargingRuleForCost): Promise<[result: TnsupdateAllChargingRuleForCostResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addWebSafeUserAsync(addWebSafeUser: TnsaddWebSafeUser): Promise<[result: TnsaddWebSafeUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getIfcPortIdByNameAsync(getIfcPortIdByName: TnsgetIfcPortIdByName): Promise<[result: TnsgetIfcPortIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllAutonomousSystemEntriesAsync(getAllAutonomousSystemEntries: TnsgetAllAutonomousSystemEntries): Promise<[result: TnsgetAllAutonomousSystemEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDeviceTCAsAsync(getDeviceTcAs: TnsgetDeviceTcAs): Promise<[result: TnsgetDeviceTcAsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    modifySnmpV3UserDataAsync(modifySnmpV3UserData: TnsmodifySnmpV3UserData): Promise<[result: TnsmodifySnmpV3UserDataResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVlanEntriesByIdsAsync(getVlanEntriesByIds: TnsgetVlanEntriesByIds): Promise<[result: TnsgetVlanEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getAllWorkServerAsync(getAllWorkServer: TnsgetAllWorkServer): Promise<[result: TnsgetAllWorkServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addSubscribersAsync(addSubscribers: TnsaddSubscribers): Promise<[result: TnsaddSubscribersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteDosCatalogEntriesAsync(deleteDosCatalogEntries: TnsdeleteDosCatalogEntries): Promise<[result: TnsdeleteDosCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServiceEntriesByIdsAsync(getServiceEntriesByIds: TnsgetServiceEntriesByIds): Promise<[result: TnsgetServiceEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setSyslogConnectionsAsync(setSyslogConnections: TnssetSyslogConnections): Promise<[result: TnssetSyslogConnectionsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getServicesByNamesAsync(getServicesByNames: TnsgetServicesByNames): Promise<[result: TnsgetServicesByNamesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateMonitoredServiceGroupEntriesAsync(updateMonitoredServiceGroupEntries: TnsupdateMonitoredServiceGroupEntries): Promise<[result: TnsupdateMonitoredServiceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getChargingApp2ServiceEntitiesByNameAsync(getChargingApp2ServiceEntitiesByName: TnsgetChargingApp2ServiceEntitiesByName): Promise<[result: TnsgetChargingApp2ServiceEntitiesByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addGreCatalogEntriesAsync(addGreCatalogEntries: TnsaddGreCatalogEntries): Promise<[result: TnsaddGreCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getCmtsIdByNameAsync(getCmtsIdByName: TnsgetCmtsIdByName): Promise<[result: TnsgetCmtsIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setSyslogEnabledAsync(setSyslogEnabled: TnssetSyslogEnabled): Promise<[result: TnssetSyslogEnabledResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    assignSmpRouterToSmpGroupAsync(assignSmpRouterToSmpGroup: TnsassignSmpRouterToSmpGroup): Promise<[result: TnsassignSmpRouterToSmpGroupResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    setEnterpriseServersTopicDTOAsync(setEnterpriseServersTopicDto: TnssetEnterpriseServersTopicDto): Promise<[result: TnssetEnterpriseServersTopicDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDosIdByNameAsync(getDosIdByName: TnsgetDosIdByName): Promise<[result: TnsgetDosIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addQuotaRulesAsync(addQuotaRules: TnsaddQuotaRules): Promise<[result: TnsaddQuotaRulesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateChargingRuleAsync(updateChargingRule: TnsupdateChargingRule): Promise<[result: TnsupdateChargingRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteClientDeviceGroupEntriesAsync(deleteClientDeviceGroupEntries: TnsdeleteClientDeviceGroupEntries): Promise<[result: TnsdeleteClientDeviceGroupEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getTimeIdByNameAsync(getTimeIdByName: TnsgetTimeIdByName): Promise<[result: TnsgetTimeIdByNameResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    updateChargingPlanEntriesAsync(updateChargingPlanEntries: TnsupdateChargingPlanEntries): Promise<[result: TnsupdateChargingPlanEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getIfcPortEntriesByIdsAsync(getIfcPortEntriesByIds: TnsgetIfcPortEntriesByIds): Promise<[result: TnsgetIfcPortEntriesByIdsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getDmInputFilteringRileListXMLAsync(getDmInputFilteringRileListXml: TnsgetDmInputFilteringRileListXml): Promise<[result: TnsgetDmInputFilteringRileListXmlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    addChargingPlanEntriesAsync(addChargingPlanEntries: TnsaddChargingPlanEntries): Promise<[result: TnsaddChargingPlanEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    exportDefaultPolicyAsync(exportDefaultPolicy: TnsexportDefaultPolicy): Promise<[result: TnsexportDefaultPolicyResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    deleteServiceGroupsAsync(deleteServiceGroups: TnsdeleteServiceGroups): Promise<[result: TnsdeleteServiceGroupsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getFullTubeDTOAsync(getFullTubeDto: TnsgetFullTubeDto): Promise<[result: TnsgetFullTubeDtoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    getVsCatalogEntriesAsync(getVsCatalogEntries: TnsgetVsCatalogEntries): Promise<[result: TnsgetVsCatalogEntriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
}

/** Create AllotClient */
export function createClientAsync(...args: Parameters<typeof soapCreateClientAsync>): Promise<AllotClient> {
    return soapCreateClientAsync(args[0], args[1], args[2]) as any;
}
